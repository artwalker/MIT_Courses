Figure 3.2: RISC-V address translation details.
or write storage.
Unlike physical memory and virtual addresses, virtual memory isn’t a physical object, but refers to the collection of abstractions and mechanisms the kernel provides to manage physical memory and virtual addresses.
3.2 Kernel address space Xv6 maintains one page table per process, describing each process’s user address space, plus a sin- gle page table that describes the kernel’s address space.
The kernel conﬁgures the layout of its ad- dress space to give itself access to physical memory and various hardware resources at predictable virtual addresses.
Figure 3.3 shows how this layout maps kernel virtual addresses to physical ad- dresses.
The ﬁle (kernel/memlayout.h) declares the constants for xv6’s kernel memory layout.
QEMU simulates a computer that includes RAM (physical memory) starting at physical ad- dress 0x80000000 and continuing through at least 0x86400000, which xv6 calls PHYSTOP.
图3.2：RISC-V地址转换细节。
或者写存储。
与物理内存和虚拟地址不同，虚拟内存不是一个物理对象，而是指内核提供的一系列抽象和机制，用于管理物理内存和虚拟地址。
3.2 内核地址空间 Xv6 每个进程维护一个页表，描述每个进程的用户地址空间，另外还有一个描述内核地址空间的单个页表。
内核配置其地址空间的布局，以便自身可以在可预测的虚拟地址上访问物理内存和各种硬件资源。
图3.3 显示了这个布局如何将内核虚拟地址映射到物理地址。
文件（kernel/memlayout.h）声明了xv6内核内存布局的常量。
QEMU模拟的计算机包括从物理地址0x80000000开始的RAM（物理内存），并持续至少到0x86400000，xv6称之为PHYSTOP。

 The QEMU simulation also includes I/O devices such as a disk interface.
QEMU exposes the de- vice interfaces to software as memory-mapped control registers that sit below 0x80000000 in the physical address space.
The kernel can interact with the devices by reading/writing these special physical addresses; such reads and writes communicate with the device hardware rather than with RAM.
Chapter 4 explains how xv6 interacts with devices.
The kernel gets at RAM and memory-mapped device registers using “direct mapping;” that is, mapping the resources at virtual addresses that are equal to the physical address.
For example, 31 Physical Page Number6A543U2W1V07891063VRWXUAD- Valid- Readable- Writable- Executable- User- Accessed- Dirty (0 in page directory)Virtual addressPhysical Address129L1L0Oﬀset12PPNOﬀsetPPNFlags0110Page DirectorysatpL2PPNFlags014410Page DirectoryPPNFlags0151110Page Directory99EXT9511511444444DUXRGA- Accessed-G- GlobalRSWReserved for supervisor software53Reserved Figure 3.
QEMU模拟器还包括磁盘接口等I/O设备。
QEMU将设备接口作为内存映射的控制寄存器暴露给软件，这些寄存器位于物理地址空间的0x80000000以下。
内核可以通过读取/写入这些特殊的物理地址与设备进行交互，这些读取和写入与设备硬件而不是RAM进行通信。
第4章解释了xv6如何与设备进行交互。
内核使用“直接映射”来访问RAM和内存映射设备寄存器，即将资源映射到与物理地址相等的虚拟地址上。
例如，31物理页号6A543U2W1V07891063VRWXUAD-有效-可读-可写-可执行-用户-已访问-已修改（在页目录中为0）虚拟地址物理地址129L1L0偏移12PPN偏移PPN标志0110页目录satpL2PPN标志014410页目录PPN标志0151110页目录99EXT9511511444444DUXRGA-已访问-G-全局RSW保留给监管软件53保留图3。

3: On the left, xv6’s kernel address space.
RWX refer to PTE read, write, and execute permissions.
On the right, the RISC-V physical address space that xv6 expects to see.
the kernel itself is located at KERNBASE=0x80000000 in both the virtual address space and in physical memory.
Direct mapping simpliﬁes kernel code that reads or writes physical memory.
For example, when fork allocates user memory for the child process, the allocator returns the physical address of that memory; fork uses that address directly as a virtual address when it is copying the parent’s user memory to the child.
There are a couple of kernel virtual addresses that aren’t direct-mapped: • The trampoline page.
It is mapped at the top of the virtual address space; user page tables have this same mapping.
3：在左侧是xv6的内核地址空间。
RWX代表PTE的读取、写入和执行权限。
在右侧是xv6期望看到的RISC-V物理地址空间。
内核本身位于虚拟地址空间和物理内存中的KERNBASE=0x80000000处。
直接映射简化了读取或写入物理内存的内核代码。
例如，当fork为子进程分配用户内存时，分配器返回该内存的物理地址；fork在将父进程的用户内存复制到子进程时，直接使用该地址作为虚拟地址。
有几个内核虚拟地址不是直接映射的：•跳板页。
它映射在虚拟地址空间的顶部；用户页表具有相同的映射。

 Chapter 4 discusses the role of the trampoline page, but we see here an interesting use case of page tables; a physical page (holding the trampoline code) is mapped twice in the virtual address space of the kernel: once at top of the virtual address space and once with a direct mapping.
32 0TrampolineUnusedUnusedUnusedKstack 0Guard pageKstack 1Guard page0x10000R-XVirtual AddressesCLINTKernel textboot ROM Physical Addresses2^56-1 Unused and other I/O devices 0x020000000x0C000000PLICUART0VIRTIO disk0x100000000x10001000KERNBASE (0x80000000)PHYSTOP (0x86400000)MAXVAKernel dataR-XRW-Physical memory (RAM)VIRTIO diskUART0CLINTPLICRW-RW-RW-RW-Free memoryRW-...------RW-RW- • The kernel stack pages.
Each process has its own kernel stack, which is mapped high so that below it xv6 can leave an unmapped guard page.
The guard page’s PTE is invalid (i.e., PTE_V is not set), so that if the kernel overﬂows a kernel stack, it will likely cause an excep- tion and the kernel will panic.
第4章讨论了弹簧床页的作用，但我们在这里看到了页面表的一个有趣的用例；一个物理页面（保存弹簧床代码）在内核的虚拟地址空间中被映射两次：一次在虚拟地址空间的顶部，一次是直接映射。
32 0弹簧床未使用未使用未使用内核栈 0守护页内核栈 1守护页0x10000R-X虚拟地址CLINT内核文本引导ROM物理地址2^56-1 未使用和其他I/O设备 0x020000000x0C000000PLICUART0VIRTIO磁盘0x100000000x10001000KERNBASE（0x80000000）PHYSTOP（0x86400000）MAXVAKernel数据R-XRW-物理内存（RAM）VIRTIO磁盘UART0CLINTPLICRW-RW-RW-RW-空闲内存RW-...------RW-RW- • 内核栈页面。
每个进程都有自己的内核栈，它被映射到高地址，这样在它下面，xv6可以留下一个未映射的守护页。
守护页的PTE无效（即，PTE_V未设置），因此如果内核溢出内核栈，它很可能会引发异常，内核将会恐慌。

 Without a guard page an overﬂowing stack would overwrite other kernel memory, resulting in incorrect operation.
A panic crash is preferable.
While the kernel uses its stacks via the high-memory mappings, they are also accessible to the kernel through a direct-mapped address.
An alternate design might have just the direct mapping, and use the stacks at the direct-mapped address.
In that arrangement, however, providing guard pages would involve unmapping virtual addresses that would otherwise refer to physical memory, which would then be hard to use.
The kernel maps the pages for the trampoline and the kernel text with the permissions PTE_R and PTE_X.
The kernel reads and executes instructions from these pages.
The kernel maps the other pages with the permissions PTE_R and PTE_W, so that it can read and write the memory in those pages.
The mappings for the guard pages are invalid.
3.3 Code: creating an address space Most of the xv6 code for manipulating address spaces and page tables resides in vm.
没有守卫页，溢出的堆栈会覆盖其他内核内存，导致操作不正确。
发生恐慌崩溃是更可取的。
虽然内核通过高内存映射使用其堆栈，但它们也可以通过直接映射地址访问内核。
另一种设计可能只有直接映射，并使用直接映射地址上的堆栈。
然而，在这种安排中，提供守卫页将涉及取消映射否则将引用物理内存的虚拟地址，这将难以使用。
内核使用PTE_R和PTE_X权限映射跳板和内核文本的页面。
内核从这些页面读取和执行指令。
内核使用PTE_R和PTE_W权限映射其他页面，以便可以读取和写入这些页面的内存。
守卫页的映射是无效的。
3.3代码：创建地址空间，大部分用于操作地址空间和页表的xv6代码位于vm中。

c (ker- nel/vm.c:1).
The central data structure is pagetable_t, which is really a pointer to a RISC-V root page-table page; a pagetable_t may be either the kernel page table, or one of the per- process page tables.
The central functions are walk, which ﬁnds the PTE for a virtual address, and mappages, which installs PTEs for new mappings.
Functions starting with kvm manipulate the kernel page table; functions starting with uvm manipulate a user page table; other functions are used for both.
copyout and copyin copy data to and from user virtual addresses provided as system call arguments; they are in vm.c because they need to explicitly translate those addresses in order to ﬁnd the corresponding physical memory.
Early in the boot sequence, main calls kvminit (kernel/vm.c:22) to create the kernel’s page table.
This call occurs before xv6 has enabled paging on the RISC-V, so addresses refer directly to physical memory.
Kvminit ﬁrst allocates a page of physical memory to hold the root page-table page.
c（ker- nel/vm.c:1）。
中央数据结构是pagetable_t，实际上是指向RISC-V根页表页的指针；pagetable_t可以是内核页表，也可以是每个进程的页表之一。
中央函数是walk，它找到虚拟地址的PTE，以及mappages，它为新映射安装PTE。
以kvm开头的函数操作内核页表；以uvm开头的函数操作用户页表；其他函数用于两者。
copyout和copyin将数据从系统调用参数提供的用户虚拟地址复制到内核虚拟地址，并且它们位于vm.c中，因为它们需要显式地转换这些地址以找到相应的物理内存。
在引导序列的早期，main调用kvminit（kernel/vm.c:22）来创建内核的页表。
此调用发生在xv6在RISC-V上启用分页之前，因此地址直接引用物理内存。
Kvminit首先分配一页物理内存来容纳根页表页。

 Then it calls kvmmap to install the translations that the kernel needs.
The translations include the kernel’s instructions and data, physical memory up to PHYSTOP, and memory ranges which are actually devices.
kvmmap (kernel/vm.c:118) calls mappages (kernel/vm.c:149), which installs mappings into a page table for a range of virtual addresses to a corresponding range of physical addresses.
It does this separately for each virtual address in the range, at page intervals.
For each virtual address to be mapped, mappages calls walk to ﬁnd the address of the PTE for that address.
It then initializes the PTE to hold the relevant physical page number, the desired permissions (PTE_W, PTE_X, and/or PTE_R), and PTE_V to mark the PTE as valid (kernel/vm.c:161).
walk (kernel/vm.c:72) mimics the RISC-V paging hardware as it looks up the PTE for a virtual address (see Figure 3.2).
walk descends the 3-level page table 9 bits at the time.
然后它调用kvmmap来安装内核所需的翻译。
这些翻译包括内核的指令和数据，物理内存直到PHYSTOP，以及实际上是设备的内存范围。
 kvmmap（kernel/vm.c:118）调用mappages（kernel/vm.c:149），为一系列虚拟地址范围安装映射到相应的物理地址的页表。
它针对范围中的每个虚拟地址单独进行操作，以页间隔进行。
对于要映射的每个虚拟地址，mappages调用walk来查找该地址的PTE的地址。
然后，它初始化PTE以保存相关的物理页号，所需的权限（PTE_W，PTE_X和/或PTE_R），并使用PTE_V将PTE标记为有效（kernel/vm.c:161）。
walk（kernel/vm.c:72）模拟RISC-V分页硬件，它查找虚拟地址的PTE（见图3.2）。
walk每次向下遍历3级页表的9位。

 It uses each level’s 9 bits of virtual address to ﬁnd the PTE of either the next-level page table or the ﬁnal page 33 (kernel/vm.c:78).
If the PTE isn’t valid, then the required page hasn’t yet been allocated; if the alloc argument is set, walk allocates a new page-table page and puts its physical address in the PTE.
It returns the address of the PTE in the lowest layer in the tree (kernel/vm.c:88).
The above code depends on physical memory being direct-mapped into the kernel virtual ad- dress space.
For example, as walk descends levels of the page table, it pulls the (physical) address of the next-level-down page table from a PTE (kernel/vm.c:80), and then uses that address as a virtual address to fetch the PTE at the next level down (kernel/vm.c:78).
main calls kvminithart (kernel/vm.c:53) to install the kernel page table.
It writes the phys- ical address of the root page-table page into the register satp.
After this the CPU will translate addresses using the kernel page table.
它使用每个级别的9位虚拟地址来查找下一级页表或最终页33的PTE（kernel/vm.c:78）。
如果PTE无效，则表示所需的页面尚未分配；如果设置了alloc参数，walk将分配一个新的页表页，并将其物理地址放入PTE。
它返回树中最低层的PTE的地址（kernel/vm.c:88）。
上述代码依赖于物理内存直接映射到内核虚拟地址空间。
例如，当walk下降页表的级别时，它从PTE中获取下一级页表的（物理）地址（kernel/vm.c:80），然后将该地址用作虚拟地址来获取下一级的PTE（kernel/vm.c:78）。
main调用kvminithart（kernel/vm.c:53）来安装内核页表。
它将根页表页的物理地址写入寄存器satp。
之后，CPU将使用内核页表来转换地址。

 Since the kernel uses an identity mapping, the now virtual address of the next instruction will map to the right physical memory address.
procinit (kernel/proc.c:26), which is called from main, allocates a kernel stack for each pro- cess.
It maps each stack at the virtual address generated by KSTACK, which leaves room for the invalid stack-guard pages.
kvmmap adds the mapping PTEs to the kernel page table, and the call to kvminithart reloads the kernel page table into satp so that the hardware knows about the new PTEs.
Each RISC-V CPU caches page table entries in a Translation Look-aside Buffer (TLB), and when xv6 changes a page table, it must tell the CPU to invalidate corresponding cached TLB entries.
If it didn’t, then at some point later the TLB might use an old cached mapping, pointing to a physical page that in the meantime has been allocated to another process, and as a result, a process might be able to scribble on some other process’s memory.
The RISC-V has an instruction sfence.
由于内核使用身份映射，下一条指令的虚拟地址将映射到正确的物理内存地址。
procinit（kernel/proc.c:26）从main函数中调用，为每个进程分配一个内核栈。
它将每个栈映射到由KSTACK生成的虚拟地址，这样可以为无效的栈保留空间。
kvmmap将映射的PTE添加到内核页表中，kvminithart调用重新加载内核页表到satp中，以便硬件了解新的PTE。
每个RISC-V CPU都会在转换查找缓冲器（TLB）中缓存页表项，当xv6更改页表时，必须告诉CPU使相应的缓存TLB项无效。
如果不这样做，那么在稍后的某个时刻，TLB可能会使用旧的缓存映射，指向与此同时已分配给另一个进程的物理页面，结果可能导致一个进程能够在其他进程的内存上乱写。
RISC-V有一条指令sfence。

vma that ﬂushes the current CPU’s TLB.
xv6 executes sfence.vma in kvminithart after reloading the satp register, and in the trampoline code that switches to a user page table before returning to user space (kernel/trampoline.S:79).
3.4 Physical memory allocation The kernel must allocate and free physical memory at run-time for page tables, user memory, kernel stacks, and pipe buffers.
xv6 uses the physical memory between the end of the kernel and PHYSTOP for run-time alloca- tion.
It allocates and frees whole 4096-byte pages at a time.
It keeps track of which pages are free by threading a linked list through the pages themselves.
Allocation consists of removing a page from the linked list; freeing consists of adding the freed page to the list.
3.5 Code: Physical memory allocator The allocator resides in kalloc.c (kernel/kalloc.c:1).
The allocator’s data structure is a free list of physical memory pages that are available for allocation.
Each free page’s list element is a struct run (kernel/kalloc.c:17).
vma是刷新当前CPU的TLB的指令。
在重新加载satp寄存器之后，xv6在kvminithart中执行sfence.vma指令，并在切换到用户页表之前返回用户空间时，在跳板代码中执行sfence.vma指令（kernel/trampoline.S:79）。


3.4 物理内存分配
内核必须在运行时为页表、用户内存、内核栈和管道缓冲区分配和释放物理内存。
xv6使用内核末尾和PHYSTOP之间的物理内存进行运行时分配。
它以4096字节的整页为单位进行分配和释放。
通过在页面本身之间引入一个链接列表来跟踪哪些页面是空闲的。
分配操作包括从链接列表中移除一个页面；释放操作包括将释放的页面添加到列表中。


3.5 代码：物理内存分配器
分配器位于kalloc.c中（kernel/kalloc.c:1）。
分配器的数据结构是一个可用于分配的物理内存页面的空闲列表。
每个空闲页面的列表元素是一个struct run（kernel/kalloc.c:17）。

 Where does the allocator get the memory to hold that data struc- ture? It store each free page’s run structure in the free page itself, since there’s nothing else stored there.
The free list is protected by a spin lock (kernel/kalloc.c:21-24).
The list and the lock are 34 wrapped in a struct to make clear that the lock protects the ﬁelds in the struct.
For now, ignore the lock and the calls to acquire and release; Chapter 6 will examine locking in detail.
The function main calls kinit to initialize the allocator (kernel/kalloc.c:27).
kinit initializes the free list to hold every page between the end of the kernel and PHYSTOP.
xv6 ought to de- termine how much physical memory is available by parsing conﬁguration information provided by the hardware.
Instead xv6 assumes that the machine has 128 megabytes of RAM.
kinit calls freerange to add memory to the free list via per-page calls to kfree.
分配器从哪里获取内存来保存数据结构？它将每个空闲页面的运行结构存储在空闲页面本身中，因为那里没有其他存储内容。
空闲列表由自旋锁保护（kernel/kalloc.c:21-24）。
列表和锁被包装在一个结构体中，以清楚地表明锁保护结构体中的字段。
暂时忽略锁和获取/释放的调用；第6章将详细讨论锁。
函数main调用kinit来初始化分配器（kernel/kalloc.c:27）。
kinit将空闲列表初始化为包含内核末尾和PHYSTOP之间的每个页面。
xv6应该通过解析硬件提供的配置信息来确定可用的物理内存量。
而xv6假设机器有128兆字节的RAM。
kinit通过对每个页面调用kfree来调用freerange来向空闲列表添加内存。

 A PTE can only refer to a physical address that is aligned on a 4096-byte boundary (is a multiple of 4096), so freerange uses PGROUNDUP to ensure that it frees only aligned physical addresses.
The allocator starts with no memory; these calls to kfree give it some to manage.
The allocator sometimes treats addresses as integers in order to perform arithmetic on them (e.g., traversing all pages in freerange), and sometimes uses addresses as pointers to read and write memory (e.g., manipulating the run structure stored in each page); this dual use of addresses is the main reason that the allocator code is full of C type casts.
The other reason is that freeing and allocation inherently change the type of the memory.
The function kfree (kernel/kalloc.c:47) begins by setting every byte in the memory being freed to the value 1.
This will cause code that uses memory after freeing it (uses “dangling references”) to read garbage instead of the old valid contents; hopefully that will cause such code to break faster.
一个PTE只能引用对齐在4096字节边界上的物理地址（是4096的倍数），所以freerange使用PGROUNDUP来确保它只释放对齐的物理地址。
分配器从没有内存开始；这些对kfree的调用给它一些要管理的内存。
分配器有时将地址视为整数以便对其进行算术运算（例如，在freerange中遍历所有页面），有时使用地址作为指针来读写内存（例如，操作存储在每个页面中的运行结构）；地址的这种双重用途是分配器代码中充满C类型转换的主要原因。
另一个原因是释放和分配本质上会改变内存的类型。
函数kfree（kernel/kalloc.c:47）首先将要释放的内存中的每个字节设置为值1。
这将导致在释放内存后使用它的代码（使用“悬空引用”）读取垃圾而不是旧的有效内容；希望这将使这样的代码更快地出错。

 Then kfree prepends the page to the free list: it casts pa to a pointer to struct run, records the old start of the free list in r->next, and sets the free list equal to r.
kalloc removes and returns the ﬁrst element in the free list.
3.6 Process address space Each process has a separate page table, and when xv6 switches between processes, it also changes page tables.
As Figure 2.3 shows, a process’s user memory starts at virtual address zero and can grow up to MAXVA (kernel/riscv.h:348), allowing a process to address in principle 256 Gigabytes of memory.
When a process asks xv6 for more user memory, xv6 ﬁrst uses kalloc to allocate physical pages.
It then adds PTEs to the process’s page table that point to the new physical pages.
Xv6 sets the PTE_W, PTE_X, PTE_R, PTE_U, and PTE_V ﬂags in these PTEs.
Most processes do not use the entire user address space; xv6 leaves PTE_V clear in unused PTEs.
We see here a few nice examples of use of page tables.
然后kfree将页面添加到空闲列表中：它将pa强制转换为指向struct run的指针，将旧的空闲列表的起始位置记录在r->next中，并将空闲列表设置为r。
kalloc从空闲列表中移除并返回第一个元素。
3.6进程地址空间每个进程都有一个单独的页表，当xv6在进程之间切换时，它也会更改页表。
如图2.3所示，进程的用户内存从虚拟地址零开始，可以增长到MAXVA（kernel/riscv.h:348），理论上允许一个进程寻址256GB的内存。
当一个进程请求xv6提供更多的用户内存时，xv6首先使用kalloc来分配物理页面。
然后，它向进程的页表中添加指向新物理页面的PTE。
Xv6在这些PTE中设置了PTE_W、PTE_X、PTE_R、PTE_U和PTE_V标志。
大多数进程不使用整个用户地址空间；xv6在未使用的PTE中将PTE_V清除。
我们在这里看到了一些关于页表使用的好例子。

 First, different processes’ page tables translate user addresses to different pages of physical memory, so that each process has private user memory.
Second, each process sees its memory as having contiguous virtual addresses starting at zero, while the process’s physical memory can be non-contiguous.
Third, the kernel maps a page with trampoline code at the top of the user address space, thus a single page of physical memory shows up in all address spaces.
Figure 3.4 shows the layout of the user memory of an executing process in xv6 in more de- tail.
The stack is a single page, and is shown with the initial contents as created by exec.
Strings containing the command-line arguments, as well as an array of pointers to them, are at the very top of the stack.
Just under that are values that allow a program to start at main as if the function 35 Figure 3.4: A process’s user address space, with its initial stack.
main(argc, argv) had just been called.
首先，不同进程的页表将用户地址转换为物理内存的不同页面，以便每个进程都有私有的用户内存。
其次，每个进程将其内存视为从零开始的连续虚拟地址，而进程的物理内存可以是非连续的。
第三，内核在用户地址空间的顶部映射了一个带有跳板代码的页面，因此单个物理内存页面在所有地址空间中都可见。
图3.4更详细地显示了xv6中正在执行的进程的用户内存布局。
堆栈是一个单独的页面，并显示了由exec创建的初始内容。
包含命令行参数的字符串以及指向它们的指针数组位于堆栈的顶部。
紧接着是一些值，允许程序从main函数开始，就像函数35图3.4：进程的用户地址空间，带有其初始堆栈。
main(argc, argv)刚刚被调用一样。

 To detect a user stack overﬂowing the allocated stack memory, xv6 places an invalid guard page right below the stack.
If the user stack overﬂows and the process tries to use an address below the stack, the hardware will generate a page-fault exception because the mapping is not valid.
A real-world operating system might instead automatically allocate more memory for the user stack when it overﬂows.
3.7 Code: sbrk Sbrk is the system call for a process to shrink or grow its memory.
The system call is implemented by the function growproc (kernel/proc.c:239).
growproc calls uvmalloc or uvmdealloc, de- pending on whether n is postive or negative.
uvmalloc (kernel/vm.c:229) allocates physical mem- ory with kalloc, and adds PTEs to the user page table with mappages.
uvmdealloc calls uvmunmap (kernel/vm.c:174), which uses walk to ﬁnd PTEs and kfree to free the physical memory they refer to.
为了检测用户堆栈溢出分配的堆栈内存，xv6在堆栈下方放置了一个无效的保护页。
如果用户堆栈溢出并且进程尝试使用堆栈下方的地址，硬件将生成一个页错误异常，因为映射无效。
而现实世界中的操作系统可能会在用户堆栈溢出时自动为其分配更多的内存。


3.7 代码：sbrk
sbrk是一个进程用来收缩或扩展其内存的系统调用。
该系统调用由函数growproc（kernel/proc.c:239）实现。
growproc根据n的正负调用uvmalloc或uvmdealloc。
uvmalloc（kernel/vm.c:229）使用kalloc分配物理内存，并使用mappages向用户页表添加PTE。
uvmdealloc调用uvmunmap（kernel/vm.c:174），它使用walk来查找PTE，并使用kfree释放它们所引用的物理内存。

 xv6 uses a process’s page table not just to tell the hardware how to map user virtual addresses, but also as the only record of which physical memory pages are allocated to that process.
That is the reason why freeing user memory (in uvmunmap) requires examination of the user page table.
36 0MAXVAtextdatastackheapPAGESIZEargument 0argument N0address of argument 0address of argument Naddress of address of argument 00xFFFFFFF(empty)argc......nul-terminated stringargv[argc]argv[0]argv argument ofmainargc argument of mainreturn PC for mainguard pagestacktrampolinetrapframe 3.8 Code: exec Exec is the system call that creates the user part of an address space.
It initializes the user part of an address space from a ﬁle stored in the ﬁle system.
Exec (kernel/exec.c:13) opens the named binary path using namei (kernel/exec.c:26), which is explained in Chapter 8.
Then, it reads the ELF header.
Xv6 applications are described in the widely-used ELF format, deﬁned in (kernel/elf.h).
xv6使用进程的页表不仅告诉硬件如何映射用户虚拟地址，还作为唯一记录分配给该进程的物理内存页的记录。
这就是为什么释放用户内存（在uvmunmap中）需要检查用户页表的原因。
36 0MAXVAtextdatastackheapPAGESIZEargument 0argument N0argument的地址argument N的地址argument的地址的地址00xFFFFFFF（空）argc......以空字符结尾的字符串argv[argc]argv[0]main函数的argv参数main函数的argc参数mainguard页stacktrampolinetrapframe 3.8代码：exec Exec是创建地址空间的用户部分的系统调用。
它从文件系统中存储的文件初始化地址空间的用户部分。
Exec（kernel/exec.c:13）使用namei（kernel/exec.c:26）打开命名的二进制路径，该函数在第8章中有解释。
然后，它读取ELF头。
Xv6应用程序使用广泛使用的ELF格式进行描述，该格式在（kernel/elf.h）中定义。

 An ELF binary consists of an ELF header, struct elfhdr (kernel/elf.h:6), followed by a sequence of program section headers, struct proghdr (kernel/elf.h:25).
Each proghdr describes a section of the application that must be loaded into memory; xv6 programs have only one program section header, but other systems might have separate sections for instructions and data.
The ﬁrst step is a quick check that the ﬁle probably contains an ELF binary.
An ELF binary starts with the four-byte “magic number” 0x7F, ‘E’, ‘L’, ‘F’, or ELF_MAGIC (kernel/elf.h:3).
If the ELF header has the right magic number, exec assumes that the binary is well-formed.
Exec allocates a new page table with no user mappings with proc_pagetable (kernel/exec.c:38), allocates memory for each ELF segment with uvmalloc (kernel/exec.c:52), and loads each segment into memory with loadseg (kernel/exec.c:10).
一个ELF二进制文件由一个ELF头部(struct elfhdr)和一系列程序段头部(struct proghdr)组成。
每个proghdr描述了一个必须加载到内存中的应用程序的部分；xv6程序只有一个程序段头部，但其他系统可能会有单独的指令和数据段。
第一步是快速检查文件是否可能包含一个ELF二进制文件。
ELF二进制文件以四字节的"魔数"0x7F, 'E', 'L', 'F'或ELF_MAGIC开始。
如果ELF头部具有正确的魔数，exec假设该二进制文件是格式良好的。
Exec使用proc_pagetable分配一个没有用户映射的新页表，使用uvmalloc为每个ELF段分配内存，并使用loadseg将每个段加载到内存中。

 loadseg uses walkaddr to ﬁnd the physical ad- dress of the allocated memory at which to write each page of the ELF segment, and readi to read from the ﬁle.
The program section header for /init, the ﬁrst user program created with exec, looks like this: # objdump -p _init user/_init: file format elf64-littleriscv Program Header: LOAD off 0x00000000000000b0 vaddr 0x0000000000000000 filesz 0x0000000000000840 memsz 0x0000000000000858 flags rwx STACK off 0x0000000000000000 vaddr 0x0000000000000000 filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw- paddr 0x0000000000000000 align 2**4 paddr 0x0000000000000000 align 2**3 The program section header’s filesz may be less than the memsz, indicating that the gap between them should be ﬁlled with zeroes (for C global variables) rather than read from the ﬁle.
For /init, filesz is 2112 bytes and memsz is 2136 bytes, and thus uvmalloc allocates enough physical memory to hold 2136 bytes, but reads only 2112 bytes from the ﬁle /init.
loadseg使用walkaddr来找到分配内存的物理地址，以便将每个ELF段的页面写入，readi用于从文件中读取。
/init的程序段头部分，是使用exec创建的第一个用户程序，如下所示：# objdump -p _init user/_init: file format elf64-littleriscv Program Header: LOAD off 0x00000000000000b0 vaddr 0x0000000000000000 filesz 0x0000000000000840 memsz 0x0000000000000858 flags rwx STACK off 0x0000000000000000 vaddr 0x0000000000000000 filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw- paddr 0x0000000000000000 align 2**4 paddr 0x0000000000000000 align 2**3 程序段头的filesz可能小于memsz，表示它们之间的间隙应该用零填充（用于C全局变量），而不是从文件中读取。
对于/init，filesz为2112字节，memsz为2136字节，因此uvmalloc分配足够的物理内存来容纳2136字节，但只从文件/init中读取了2112字节。

 Now exec allocates and initializes the user stack.
It allocates just one stack page.
Exec copies the argument strings to the top of the stack one at a time, recording the pointers to them in ustack.
It places a null pointer at the end of what will be the argv list passed to main.
The ﬁrst three entries in ustack are the fake return program counter, argc, and argv pointer.
Exec places an inaccessible page just below the stack page, so that programs that try to use more than one page will fault.
This inaccessible page also allows exec to deal with arguments that are too large; in that situation, the copyout (kernel/vm.c:355) function that exec uses to copy arguments to the stack will notice that the destination page is not accessible, and will return -1.
During the preparation of the new memory image, if exec detects an error like an invalid program segment, it jumps to the label bad, frees the new image, and returns -1.
现在exec分配并初始化用户栈。
它只分配一个栈页。
Exec逐个将参数字符串复制到栈顶，并在ustack中记录它们的指针。
它在将传递给main函数的argv列表的末尾放置一个空指针。
ustack的前三个条目是虚拟的返回程序计数器、argc和argv指针。
Exec在栈页的下方放置一个不可访问的页面，以便试图使用多个页面的程序会出错。
这个不可访问的页面还允许exec处理过大的参数；在这种情况下，exec用于将参数复制到栈上的copyout（kernel/vm.c:355）函数会注意到目标页面不可访问，并返回-1。
在准备新的内存映像期间，如果exec检测到无效的程序段等错误，它会跳转到标签bad，释放新的映像，并返回-1。

 Exec must wait 37 to free the old image until it is sure that the system call will succeed: if the old image is gone, the system call cannot return -1 to it.
The only error cases in exec happen during the creation of the image.
Once the image is complete, exec can commit to the new page table (kernel/exec.c:113) and free the old one (kernel/exec.c:117).
Exec loads bytes from the ELF ﬁle into memory at addresses speciﬁed by the ELF ﬁle.
Users or processes can place whatever addresses they want into an ELF ﬁle.
Thus exec is risky, because the addresses in the ELF ﬁle may refer to the kernel, accidentally or on purpose.
The consequences for an unwary kernel could range from a crash to a malicious subversion of the kernel’s isolation mechanisms (i.e., a security exploit).
xv6 performs a number of checks to avoid these risks.
For example if(ph.vaddr + ph.memsz < ph.vaddr) checks for whether the sum overﬂows a 64-bit integer.
The danger is that a user could construct an ELF binary with a ph.
Exec必须等待37个周期才能释放旧的镜像，直到它确定系统调用将成功为止：如果旧的镜像消失了，系统调用就无法返回-1。
在exec中，唯一的错误情况发生在镜像创建过程中。
一旦镜像完成，exec就可以提交新的页表（kernel/exec.c:113）并释放旧的页表（kernel/exec.c:117）。
Exec将字节从ELF文件加载到由ELF文件指定的内存地址中。
用户或进程可以将任何地址放入ELF文件中。
因此，exec是有风险的，因为ELF文件中的地址可能无意或有意地引用内核。
对于一个不谨慎的内核来说，后果可能是崩溃或对内核隔离机制的恶意破坏（即安全漏洞）。
xv6执行了许多检查以避免这些风险。
例如，if(ph.vaddr + ph.memsz < ph.vaddr)检查总和是否溢出64位整数。
危险在于用户可能构造一个具有ph的ELF二进制文件。

vaddr that points to a user-chosen address, and ph.memsz large enough that the sum overﬂows to 0x1000, which will look like a valid value.
In an older version of xv6 in which the user address space also contained the kernel (but not readable/writable in user mode), the user could choose an address that corresponded to kernel memory and would thus copy data from the ELF binary into the kernel.
In the RISC-V version of xv6 this cannot happen, because the kernel has its own separate page table; loadseg loads into the process’s page table, not in the kernel’s page table.
It is easy for a kernel developer to omit a crucial check, and real-world kernels have a long history of missing checks whose absence can be exploited by user programs to obtain kernel priv- ileges.
It is likely that xv6 doesn’t do a complete job of validating user-level data supplied to the kernel, which a malicious user program might be able to exploit to circumvent xv6’s isolation.
3.
vaddr指向用户选择的地址，而ph.memsz足够大，使得总和溢出到0x1000，这将看起来像一个有效的值。
在旧版本的xv6中，用户地址空间也包含内核（但在用户模式下不可读/可写），用户可以选择与内核内存对应的地址，从ELF二进制文件中复制数据到内核中。
在RISC-V版本的xv6中，这是不可能的，因为内核有自己独立的页表；loadseg加载到进程的页表中，而不是内核的页表中。
对于内核开发人员来说，很容易忽略一个关键的检查，而现实世界的内核在缺少这些检查的情况下可以被用户程序利用以获取内核权限。
很可能xv6在验证用户级别数据供给内核方面没有完全做好工作，这可能被恶意用户程序利用来规避xv6的隔离。

9 Real world Like most operating systems, xv6 uses the paging hardware for memory protection and mapping.
Most operating systems make far more sophisticated use of paging than xv6 by combining paging and page-fault exceptions, which we will discuss in Chapter 4.
Xv6 is simpliﬁed by the kernel’s use of a direct map between virtual and physical addresses, and by its assumption that there is physical RAM at address 0x8000000, where the kernel expects to be loaded.
This works with QEMU, but on real hardware it turns out to be a bad idea; real hardware places RAM and devices at unpredictable physical addresses, so that (for example) there might be no RAM at 0x8000000, where xv6 expect to be able to store the kernel.
More serious kernel designs exploit the page table to turn arbitrary hardware physical memory layouts into predictable kernel virtual address layouts.
RISC-V supports protection at the level of physical addresses, but xv6 doesn’t use that feature.
9 真实世界
与大多数操作系统一样，xv6使用分页硬件进行内存保护和映射。
大多数操作系统在分页和页面错误异常的结合上比xv6更加复杂，我们将在第4章中讨论这一点。
xv6通过内核使用虚拟地址和物理地址之间的直接映射，以及假设物理RAM位于地址0x8000000处，简化了操作。
这在QEMU上可以工作，但在真实硬件上却是一个坏主意；真实硬件将RAM和设备放置在不可预测的物理地址上，因此（例如）可能没有RAM在xv6期望存储内核的0x8000000处。
更严重的内核设计利用页表将任意硬件物理内存布局转换为可预测的内核虚拟地址布局。
RISC-V支持在物理地址级别上的保护，但xv6不使用该功能。

 On machines with lots of memory it might make sense to use RISC-V’s support for “super pages.” Small pages make sense when physical memory is small, to allow allocation and page-out to disk with ﬁne granularity.
For example, if a program uses only 8 kilobytes of memory, giving it a whole 4-megabyte super-page of physical memory is wasteful.
Larger pages make sense on machines with lots of RAM, and may reduce overhead for page-table manipulation.
The xv6 kernel’s lack of a malloc-like allocator that can provide memory for small objects prevents the kernel from using sophisticated data structures that would require dynamic allocation.
38 Memory allocation is a perennial hot topic, the basic problems being efﬁcient use of limited memory and preparing for unknown future requests [7].
Today people care more about speed than space efﬁciency.
在具有大量内存的机器上，使用RISC-V对“超级页面”的支持可能是有意义的。
当物理内存较小时，使用小页面可以实现细粒度的分配和页面写入磁盘。
例如，如果一个程序只使用8千字节的内存，给它一个完整的4兆字节的超级页面物理内存是浪费的。
在具有大量RAM的机器上，使用较大的页面是有意义的，并且可以减少页面表操作的开销。
xv6内核缺乏类似malloc的分配器，无法为小对象提供内存，这阻止了内核使用需要动态分配的复杂数据结构。
38内存分配是一个长期热门话题，基本问题是有效利用有限的内存并为未知的未来请求做准备[7]。
如今，人们更关心速度而不是空间效率。

 In addition, a more elaborate kernel would likely allocate many different sizes of small blocks, rather than (as in xv6) just 4096-byte blocks; a real kernel allocator would need to handle small allocations as well as large ones.
3.10 Exercises 1.
Parse RISC-V’s device tree to ﬁnd the amount of physical memory the computer has.
2.
Write a user program that grows its address space by one byte by calling sbrk(1).
Run the program and investigate the page table for the program before the call to sbrk and after the call to sbrk.
How much space has the kernel allocated? What does the PTE for the new memory contain? 3.
Modify xv6 to use super pages for the kernel.
4.
Modify xv6 so that when a user program dereferences a null pointer, it will receive an ex- ception.
That is, modify xv6 so that virtual address 0 isn’t mapped for user programs.
5.
Unix implementations of exec traditionally include special handling for shell scripts.
If the ﬁle to execute begins with the text #!
此外，一个更详细的内核可能会分配许多不同大小的小块，而不仅仅是（如xv6中的）4096字节的块；一个真正的内核分配器需要处理小的分配和大的分配。
3.10练习1.解析RISC-V的设备树，找到计算机的物理内存量。
2.编写一个用户程序，通过调用sbrk（1）来扩展其地址空间一个字节。
运行程序并调查调用sbrk之前和调用sbrk之后的程序的页表。
内核分配了多少空间？新内存的PTE包含什么？3.修改xv6以使用超级页作为内核。
4.修改xv6，使得当用户程序解引用空指针时，它将收到一个异常。
也就是说，修改xv6，使得用户程序的虚拟地址0不被映射。
5.
Unix的exec实现传统上包括对shell脚本的特殊处理。
如果要执行的文件以文本#!开头
, then the ﬁrst line is taken to be a program to run to interpret the ﬁle.
For example, if exec is called to run myprog arg1 and myprog ’s ﬁrst line is #!/interp, then exec runs /interp with command line /interp myprog arg1.
Implement support for this convention in xv6.
6.
Implement address space randomization for the kernel.
，然后第一行被视为要运行以解释该文件的程序。
例如，如果调用exec来运行myprog arg1，并且myprog的第一行是#!/interp，那么exec将使用命令行/interp myprog arg1运行/interp。
在xv6中实现对这种约定的支持。
6.
为内核实现地址空间随机化。

