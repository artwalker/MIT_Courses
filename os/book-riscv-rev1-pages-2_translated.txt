System call Description Grow process’s memory by n bytes.
Returns start of new memory.
Open a ﬁle; ﬂags indicate read/write; returns an fd (ﬁle descriptor).
Create a process, return child’s PID.
Terminate the current process; status reported to wait().
No return.
Wait for a child to exit; exit status in *status; returns child PID.
Terminate process PID.
Returns 0, or -1 for error.
Return the current process’s PID.
Pause for n clock ticks.
int fork() int exit(int status) int wait(int *status) int kill(int pid) int getpid() int sleep(int n) int exec(char *ﬁle, char *argv[]) Load a ﬁle and execute it with arguments; only returns if error.
char *sbrk(int n) int open(char *ﬁle, int ﬂags) int write(int fd, char *buf, int n) Write n bytes from buf to ﬁle descriptor fd; returns n.
Read n bytes into buf; returns number read; or 0 if end of ﬁle.
int read(int fd, char *buf, int n) Release open ﬁle fd.
int close(int fd) Return a new ﬁle descriptor referring to the same ﬁle as fd.
系统调用描述通过n个字节增加进程的内存。
返回新内存的起始地址。
打开一个文件；标志指示读/写；返回一个fd（文件描述符）。
创建一个进程，返回子进程的PID。
终止当前进程；状态报告给wait()。
没有返回值。
等待子进程退出；退出状态在*status中；返回子进程的PID。
终止进程PID。
返回0，或-1表示错误。
返回当前进程的PID。
暂停n个时钟滴答。
int fork() int exit(int status) int wait(int *status) int kill(int pid) int getpid() int sleep(int n) int exec(char *file, char *argv[])加载一个文件并使用参数执行它；只有在错误时才返回。
char *sbrk(int n) int open(char *file, int flags) int write(int fd, char *buf, int n)从buf中写入n个字节到文件描述符fd；返回n。
从文件中读取n个字节到buf中；返回读取的数量；如果到达文件末尾则返回0。
int read(int fd, char *buf, int n)释放打开的文件fd。
int close(int fd)返回一个指向与fd相同的文件的新文件描述符。

 int dup(int fd) Create a pipe, put read/write ﬁle descriptors in p[0] and p[1].
int pipe(int p[]) Change the current directory.
int chdir(char *dir) Create a new directory.
int mkdir(char *dir) Create a device ﬁle.
int mknod(char *ﬁle, int, int) int fstat(int fd, struct stat *st) Place info about an open ﬁle into *st.
int stat(char *ﬁle, struct stat *st) Place info about a named ﬁle into *st.
int link(char *ﬁle1, char *ﬁle2) int unlink(char *ﬁle) Create another name (ﬁle2) for the ﬁle ﬁle1.
Remove a ﬁle.
Figure 1.2: Xv6 system calls.
If not otherwise stated, these calls return 0 for no error, and -1 if there’s an error.
pid = wait((int *) 0); printf("child %d is done\n", pid); } else if(pid == 0){ printf("child: exiting\n"); exit(0); } else { printf("fork error\n"); } The exit system call causes the calling process to stop executing and to release resources such as memory and open ﬁles.
Exit takes an integer status argument, conventionally 0 to indicate success and 1 to indicate failure.
int dup(int fd) 创建一个管道，将读/写文件描述符放入p[0]和p[1]中。

int pipe(int p[]) 改变当前目录。

int chdir(char *dir) 创建一个新目录。

int mkdir(char *dir) 创建一个设备文件。

int mknod(char *file, int, int) 将有关打开文件的信息放入*st中。

int stat(char *file, struct stat *st) 将有关命名文件的信息放入*st中。

int link(char *file1, char *file2) int unlink(char *file) 为文件file1创建另一个名称（file2）。
删除一个文件。

图1.2：Xv6系统调用。
除非另有说明，否则这些调用返回0表示无错误，返回-1表示有错误。

pid = wait((int *) 0); printf("child %d is done\n", pid); } else if(pid == 0){ printf("child: exiting\n"); exit(0); } else { printf("fork error\n"); } exit系统调用使调用进程停止执行并释放诸如内存和打开文件之类的资源。
Exit接受一个整数状态参数，通常为0表示成功，1表示失败。

 The wait system call returns the PID of an exited (or killed) child of the current process and copies the exit status of the child to the address passed to wait; if none of the caller’s children has exited, wait waits for one to do so.
If the caller has no children, wait immediately returns -1.
If the parent doesn’t care about the exit status of a child, it can pass a 0 address to wait.
In the example, the output lines 11 parent: child=1234 child: exiting might come out in either order, depending on whether the parent or child gets to its printf call ﬁrst.
After the child exits, the parent’s wait returns, causing the parent to print parent: child 1234 is done Although the child has the same memory contents as the parent initially, the parent and child are executing with different memory and different registers: changing a variable in one does not affect the other.
For example, when the return value of wait is stored into pid in the parent process, it doesn’t change the variable pid in the child.
wait系统调用返回当前进程的已退出（或被杀死）子进程的PID，并将子进程的退出状态复制到传递给wait的地址；如果调用者的子进程都没有退出，wait将等待其中一个子进程退出。
如果调用者没有子进程，wait立即返回-1。
如果父进程不关心子进程的退出状态，可以将地址传递给wait的参数设为0。
在示例中，输出行11 parent: child=1234 child: exiting的顺序可能是任意的，取决于父进程或子进程哪个先执行printf调用。
子进程退出后，父进程的wait返回，导致父进程打印parent: child 1234 is done。
尽管子进程最初具有与父进程相同的内存内容，但父进程和子进程在执行时具有不同的内存和不同的寄存器：在一个进程中更改变量不会影响另一个进程。
例如，当wait的返回值存储到父进程的pid变量中时，它不会改变子进程中的pid变量。

 The value of pid in the child will still be zero.
The exec system call replaces the calling process’s memory with a new memory image loaded from a ﬁle stored in the ﬁle system.
The ﬁle must have a particular format, which speciﬁes which part of the ﬁle holds instructions, which part is data, at which instruction to start, etc.
xv6 uses the ELF format, which Chapter 3 discusses in more detail.
When exec succeeds, it does not return to the calling program; instead, the instructions loaded from the ﬁle start executing at the entry point declared in the ELF header.
Exec takes two arguments: the name of the ﬁle containing the executable and an array of string arguments.
For example: char *argv[3]; argv[0] = "echo"; argv[1] = "hello"; argv[2] = 0; exec("/bin/echo", argv); printf("exec error\n"); This fragment replaces the calling program with an instance of the program /bin/echo running with the argument list echo hello.
在子进程中，pid的值仍然为零。
exec系统调用用一个存储在文件系统中的文件替换调用进程的内存，从而加载一个新的内存映像。
该文件必须具有特定的格式，该格式指定了文件的哪个部分保存指令，哪个部分保存数据，从哪个指令开始执行等等。
xv6使用ELF格式，第3章对此进行了更详细的讨论。
当exec成功时，它不会返回给调用程序；相反，从文件中加载的指令将从ELF头中声明的入口点开始执行。
Exec接受两个参数：包含可执行文件的文件名和一个字符串参数数组。
例如：char *argv[3]; argv[0] = "echo"; argv[1] = "hello"; argv[2] = 0; exec("/bin/echo", argv); printf("exec error\n"); 这个片段用程序/bin/echo的实例替换了调用程序，并使用参数列表echo hello运行。

 Most programs ignore the ﬁrst element of the argument array, which is conventionally the name of the program.
The xv6 shell uses the above calls to run programs on behalf of users.
The main structure of the shell is simple; see main (user/sh.c:145).
The main loop reads a line of input from the user with getcmd.
Then it calls fork, which creates a copy of the shell process.
The parent calls wait, while the child runs the command.
For example, if the user had typed “echo hello” to the shell, runcmd would have been called with “echo hello” as the argument.
runcmd (user/sh.c:58) runs the actual command.
For “echo hello”, it would call exec (user/sh.c:78).
If exec succeeds then the child will execute instructions from echo instead of runcmd.
At some point echo will call exit, which will cause the parent to return from wait in main (user/sh.c:145).
You might wonder why fork and exec are not combined in a single call; we will see later that the shell exploits the separation in its implementation of I/O redirection.
大多数程序忽略参数数组的第一个元素，这个元素通常是程序的名称。
xv6 shell使用上述调用代表用户运行程序。
shell的主要结构很简单，参见main（user/sh.c:145）。
主循环从用户那里读取一行输入，然后调用fork创建一个shell进程的副本。
父进程调用wait，而子进程运行命令。
例如，如果用户在shell中输入了“echo hello”，runcmd将以“echo hello”作为参数被调用。
runcmd（user/sh.c:58）运行实际的命令。
对于“echo hello”，它将调用exec（user/sh.c:78）。
如果exec成功，子进程将执行echo的指令而不是runcmd。
在某个时候，echo将调用exit，这将导致父进程从main的wait中返回（user/sh.c:145）。
你可能会想为什么fork和exec没有合并成一个单独的调用；我们将在后面看到，shell在实现I/O重定向时利用了这种分离。

 To avoid the wastefulness of creating a duplicate process and then immediately replacing it (with exec), operating kernels optimize the implementation of fork for this use case by using virtual memory techniques such as copy-on-write (see Section 4.6).
Xv6 allocates most user-space memory implicitly: fork allocates the memory required for the child’s copy of the parent’s memory, and exec allocates enough memory to hold the executable 12 ﬁle.
A process that needs more memory at run-time (perhaps for malloc) can call sbrk(n) to grow its data memory by n bytes; sbrk returns the location of the new memory.
1.2 I/O and File descriptors A ﬁle descriptor is a small integer representing a kernel-managed object that a process may read from or write to.
A process may obtain a ﬁle descriptor by opening a ﬁle, directory, or device, or by creating a pipe, or by duplicating an existing descriptor.
为了避免创建重复的进程，然后立即用exec替换它（使用虚拟内存技术，如写时复制），操作内核通过优化fork的实现来处理这种情况（参见第4.6节）。
Xv6隐式分配大部分用户空间内存：fork分配子进程所需的父进程内存副本，exec分配足够的内存来容纳可执行文件。
在运行时需要更多内存的进程（例如用于malloc）可以调用sbrk(n)来扩展其数据内存n字节；sbrk返回新内存的位置。
1.2 I/O和文件描述符文件描述符是一个表示内核管理的对象的小整数，进程可以从中读取或写入。
进程可以通过打开文件、目录或设备、创建管道或复制现有描述符来获得文件描述符。

 For simplicity we’ll often refer to the object a ﬁle descriptor refers to as a “ﬁle”; the ﬁle descriptor interface abstracts away the differences between ﬁles, pipes, and devices, making them all look like streams of bytes.
We’ll refer to input and output as I/O.
Internally, the xv6 kernel uses the ﬁle descriptor as an index into a per-process table, so that every process has a private space of ﬁle descriptors starting at zero.
By convention, a process reads from ﬁle descriptor 0 (standard input), writes output to ﬁle descriptor 1 (standard output), and writes error messages to ﬁle descriptor 2 (standard error).
As we will see, the shell exploits the convention to implement I/O redirection and pipelines.
The shell ensures that it always has three ﬁle descriptors open (user/sh.c:151), which are by default ﬁle descriptors for the console.
The read and write system calls read bytes from and write bytes to open ﬁles named by ﬁle descriptors.
为了简化，我们经常将文件描述符所指的对象称为“文件”；文件描述符接口将文件、管道和设备之间的差异抽象出来，使它们都看起来像是字节流。
我们将输入和输出称为I/O。
在内部，xv6内核使用文件描述符作为进程表的索引，以便每个进程都有一个从零开始的私有文件描述符空间。
按照惯例，进程从文件描述符0（标准输入）读取，将输出写入文件描述符1（标准输出），将错误消息写入文件描述符2（标准错误）。
正如我们将看到的，shell利用这个约定来实现I/O重定向和管道。
shell确保它始终有三个打开的文件描述符（user/sh.c:151），默认情况下是控制台的文件描述符。
读取和写入系统调用通过文件描述符读取字节和写入字节到由文件描述符命名的打开文件。

 The call read(fd, buf, n) reads at most n bytes from the ﬁle descriptor fd, copies them into buf, and returns the number of bytes read.
Each ﬁle descriptor that refers to a ﬁle has an offset associated with it.
Read reads data from the current ﬁle offset and then advances that offset by the number of bytes read: a subsequent read will return the bytes following the ones returned by the ﬁrst read.
When there are no more bytes to read, read returns zero to indicate the end of the ﬁle.
The call write(fd, buf, n) writes n bytes from buf to the ﬁle descriptor fd and returns the number of bytes written.
Fewer than n bytes are written only when an error occurs.
Like read, write writes data at the current ﬁle offset and then advances that offset by the number of bytes written: each write picks up where the previous one left off.
The following program fragment (which forms the essence of the program cat) copies data from its standard input to its standard output.
调用read(fd, buf, n)从文件描述符fd中最多读取n个字节，将其复制到buf中，并返回读取的字节数。
每个指向文件的文件描述符都有一个关联的偏移量。
read从当前文件偏移量读取数据，然后将该偏移量按读取的字节数进行增加：后续的读取将返回第一个读取后的字节。
当没有更多字节可读时，read返回零以表示文件的结束。
调用write(fd, buf, n)将buf中的n个字节写入文件描述符fd，并返回写入的字节数。
只有在发生错误时才会写入少于n个字节。
与read类似，write在当前文件偏移量处写入数据，然后将该偏移量按写入的字节数进行增加：每次写入都从上一次写入的位置继续。
以下程序片段（构成程序cat的核心）将数据从标准输入复制到标准输出。

 If an error occurs, it writes a message to the standard error.
char buf[512]; int n; for(;;){ n = read(0, buf, sizeof buf); if(n == 0) break; if(n < 0){ fprintf(2, "read error\n"); exit(1); } 13 if(write(1, buf, n) != n){ fprintf(2, "write error\n"); exit(1); } } The important thing to note in the code fragment is that cat doesn’t know whether it is reading from a ﬁle, console, or a pipe.
Similarly cat doesn’t know whether it is printing to a console, a ﬁle, or whatever.
The use of ﬁle descriptors and the convention that ﬁle descriptor 0 is input and ﬁle descriptor 1 is output allows a simple implementation of cat.
The close system call releases a ﬁle descriptor, making it free for reuse by a future open, pipe, or dup system call (see below).
A newly allocated ﬁle descriptor is always the lowest- numbered unused descriptor of the current process.
File descriptors and fork interact to make I/O redirection easy to implement.
如果发生错误，它会将消息写入标准错误。
char buf[512]; int n; for(;;){ n = read(0, buf, sizeof buf); if(n == 0) break; if(n < 0){ fprintf(2, "读取错误\n"); exit(1); } 13 if(write(1, buf, n) != n){ fprintf(2, "写入错误\n"); exit(1); } } 代码片段中需要注意的重要事项是，cat 不知道它是从文件、控制台还是管道中读取。
同样，cat 不知道它是打印到控制台、文件还是其他地方。
使用文件描述符和文件描述符 0 是输入，文件描述符 1 是输出的约定，可以简单实现 cat。
close 系统调用释放文件描述符，使其可以被未来的 open、pipe 或 dup 系统调用重新使用（见下文）。
新分配的文件描述符始终是当前进程中未使用的最低编号的描述符。
文件描述符和 fork 相互作用，使得实现 I/O 重定向变得容易。

 Fork copies the parent’s ﬁle descriptor table along with its memory, so that the child starts with exactly the same open ﬁles as the parent.
The system call exec replaces the calling process’s memory but preserves its ﬁle table.
This behavior allows the shell to implement I/O redirection by forking, re- opening chosen ﬁle descriptors in the child, and then calling exec to run the new program.
Here is a simpliﬁed version of the code a shell runs for the command cat < input.txt: char *argv[2]; argv[0] = "cat"; argv[1] = 0; if(fork() == 0) { close(0); open("input.txt", O_RDONLY); exec("cat", argv); } After the child closes ﬁle descriptor 0, open is guaranteed to use that ﬁle descriptor for the newly opened input.txt: 0 will be the smallest available ﬁle descriptor.
Cat then executes with ﬁle descriptor 0 (standard input) referring to input.txt.
The parent process’s ﬁle descriptors are not changed by this sequence, since it modiﬁes only the child’s descriptors.
Fork复制父进程的文件描述符表和内存，使得子进程以与父进程完全相同的打开文件开始。
系统调用exec替换调用进程的内存，但保留其文件表。
这种行为允许shell通过fork、在子进程中重新打开选择的文件描述符，然后调用exec来运行新程序来实现I/O重定向。
这是shell为命令cat < input.txt运行的代码的简化版本：char *argv[2]; argv[0] = "cat"; argv[1] = 0; if(fork() == 0) { close(0); open("input.txt", O_RDONLY); exec("cat", argv); }子进程关闭文件描述符0后，open保证使用该文件描述符打开新打开的input.txt：0将是最小可用的文件描述符。
然后，cat使用文件描述符0（标准输入）引用input.txt执行。
这个序列不会改变父进程的文件描述符，因为它只修改了子进程的描述符。

 The code for I/O redirection in the xv6 shell works in exactly this way (user/sh.c:82).
Recall that at this point in the code the shell has already forked the child shell and that runcmd will call exec to load the new program.
The second argument to open consists of a set of ﬂags, expressed as bits, that control what open does.
The possible values are deﬁned in the ﬁle control (fcntl) header (kernel/fcntl.h:1-5): O_RDONLY, O_WRONLY, O_RDWR, O_CREATE, and O_TRUNC, which instruct open to open the ﬁle for reading, or for writing, or for both reading and writing, to create the ﬁle if it doesn’t exist, and to truncate the ﬁle to zero length.
Now it should be clear why it is helpful that fork and exec are separate calls: between the two, the shell has a chance to redirect the child’s I/O without disturbing the I/O setup of the main shell.
One could instead imagine a hypothetical combined forkexec system call, but the options 14 for doing I/O redirection with such a call seem awkward.
在xv6 shell中，I/O重定向的代码正是以这种方式工作的（user/sh.c:82）。
请记住，在代码的这一点上，shell已经fork了子shell，并且runcmd将调用exec来加载新程序。
open的第二个参数由一组标志位表示，这些标志位以位的形式控制open的行为。
可能的值在文件控制（fcntl）头文件（kernel/fcntl.h:1-5）中定义：O_RDONLY，O_WRONLY，O_RDWR，O_CREATE和O_TRUNC，它们指示open打开文件进行读取，写入，或同时进行读取和写入，如果文件不存在，则创建文件，并将文件截断为零长度。
现在应该清楚为什么fork和exec是分开的调用是有帮助的：在这两个调用之间，shell有机会重定向子shell的I/O，而不会干扰主shell的I/O设置。
也可以想象一个假设的组合forkexec系统调用，但是使用这样的调用进行I/O重定向的选项似乎很笨拙。

 The shell could modify its own I/O setup before calling forkexec (and then un-do those modiﬁcations); or forkexec could take instructions for I/O redirection as arguments; or (least attractively) every program like cat could be taught to do its own I/O redirection.
Although fork copies the ﬁle descriptor table, each underlying ﬁle offset is shared between parent and child.
Consider this example: if(fork() == 0) { write(1, "hello ", 6); exit(0); } else { wait(0); write(1, "world\n", 6); } At the end of this fragment, the ﬁle attached to ﬁle descriptor 1 will contain the data hello world.
The write in the parent (which, thanks to wait, runs only after the child is done) picks up where the child’s write left off.
This behavior helps produce sequential output from sequences of shell commands, like (echo hello; echo world) >output.txt.
The dup system call duplicates an existing ﬁle descriptor, returning a new one that refers to the same underlying I/O object.
shell在调用forkexec之前可以修改自己的I/O设置（然后撤销这些修改）；或者forkexec可以将I/O重定向的指令作为参数传递；或者（最不理想的情况）像cat这样的每个程序都可以被教导自己进行I/O重定向。
虽然fork会复制文件描述符表，但每个底层文件偏移量在父进程和子进程之间是共享的。
考虑以下示例：if(fork() == 0) { write(1, "hello ", 6); exit(0); } else { wait(0); write(1, "world\n", 6); } 在这段代码的末尾，与文件描述符1关联的文件将包含数据hello world。
父进程中的写操作（由于wait的存在，只有在子进程完成后才会执行）从子进程的写操作结束的地方继续。
这种行为有助于从shell命令序列中产生顺序输出，例如(echo hello; echo world) >output.txt。
dup系统调用可以复制现有的文件描述符，返回一个指向相同底层I/O对象的新文件描述符。

 Both ﬁle descriptors share an offset, just as the ﬁle descriptors duplicated by fork do.
This is another way to write hello world into a ﬁle: fd = dup(1); write(1, "hello ", 6); write(fd, "world\n", 6); Two ﬁle descriptors share an offset if they were derived from the same original ﬁle descriptor by a sequence of fork and dup calls.
Otherwise ﬁle descriptors do not share offsets, even if they resulted from open calls for the same ﬁle.
Dup allows shells to implement commands like this: ls existing-file non-existing-file > tmp1 2>&1.
The 2>&1 tells the shell to give the command a ﬁle descriptor 2 that is a duplicate of descriptor 1.
Both the name of the existing ﬁle and the error message for the non-existing ﬁle will show up in the ﬁle tmp1.
The xv6 shell doesn’t support I/O redirection for the error ﬁle descriptor, but now you know how to implement it.
两个文件描述符共享一个偏移量，就像fork复制的文件描述符一样。
这是另一种将hello world写入文件的方法：fd = dup(1); write(1, "hello ", 6); write(fd, "world\n", 6); 如果两个文件描述符是通过一系列的fork和dup调用从同一个原始文件描述符派生出来的，则它们共享一个偏移量。
否则，即使它们是由于对同一个文件的打开调用而产生的，文件描述符也不共享偏移量。
Dup允许shell实现像这样的命令：ls existing-file non-existing-file > tmp1 2>&1。
2>&1告诉shell给命令一个文件描述符2，该文件描述符是描述符1的副本。
现有文件的名称和不存在文件的错误消息都将显示在文件tmp1中。
xv6 shell不支持错误文件描述符的I/O重定向，但现在你知道如何实现它了。

 File descriptors are a powerful abstraction, because they hide the details of what they are con- nected to: a process writing to ﬁle descriptor 1 may be writing to a ﬁle, to a device like the console, or to a pipe.
1.3 Pipes A pipe is a small kernel buffer exposed to processes as a pair of ﬁle descriptors, one for reading and one for writing.
Writing data to one end of the pipe makes that data available for reading from the other end of the pipe.
Pipes provide a way for processes to communicate.
The following example code runs the program wc with standard input connected to the read end of a pipe.
15 int p[2]; char *argv[2]; argv[0] = "wc"; argv[1] = 0; pipe(p); if(fork() == 0) { close(0); dup(p[0]); close(p[0]); close(p[1]); exec("/bin/wc", argv); } else { close(p[0]); write(p[1], "hello world\n", 12); close(p[1]); } The program calls pipe, which creates a new pipe and records the read and write ﬁle descriptors in the array p.
After fork, both parent and child have ﬁle descriptors referring to the pipe.
文件描述符是一个强大的抽象，因为它们隐藏了它们连接到的细节：写入文件描述符1的进程可以写入文件、控制台设备或管道。
1.3 管道 管道是一个小的内核缓冲区，以一对文件描述符的形式暴露给进程，一个用于读取，一个用于写入。
将数据写入管道的一端，使得该数据可以从管道的另一端进行读取。
管道提供了进程间通信的一种方式。
以下示例代码运行程序 wc，将标准输入连接到管道的读取端。
15 int p[2]; char *argv[2]; argv[0] = "wc"; argv[1] = 0; pipe(p); if(fork() == 0) { close(0); dup(p[0]); close(p[0]); close(p[1]); exec("/bin/wc", argv); } else { close(p[0]); write(p[1], "hello world\n", 12); close(p[1]); } 程序调用 pipe，创建一个新的管道，并将读取和写入文件描述符记录在数组 p 中。
fork 后，父进程和子进程都有指向管道的文件描述符。

 The child calls close and dup to make ﬁle descriptor zero refer to the read end of the pipe, closes the ﬁle descriptors in p, and calls exec to run wc.
When wc reads from its standard input, it reads from the pipe.
The parent closes the read side of the pipe, writes to the pipe, and then closes the write side.
If no data is available, a read on a pipe waits for either data to be written or for all ﬁle descrip- tors referring to the write end to be closed; in the latter case, read will return 0, just as if the end of a data ﬁle had been reached.
The fact that read blocks until it is impossible for new data to arrive is one reason that it’s important for the child to close the write end of the pipe before executing wc above: if one of wc ’s ﬁle descriptors referred to the write end of the pipe, wc would never see end-of-ﬁle.
The xv6 shell implements pipelines such as grep fork sh.c | wc -l in a manner similar to the above code (user/sh.c:100).
孩子调用close和dup来使文件描述符0指向管道的读端，关闭p中的文件描述符，并调用exec来运行wc。
当wc从标准输入读取时，它从管道中读取。
父进程关闭管道的读端，向管道写入数据，然后关闭写端。
如果没有数据可用，对管道的读取将等待数据被写入或所有指向写端的文件描述符被关闭；在后一种情况下，读取将返回0，就像到达数据文件的末尾一样。
read阻塞直到不可能有新数据到达是read阻塞的原因之一，这也是为什么在执行wc之前，孩子进程关闭管道的写端很重要：如果wc的文件描述符之一指向管道的写端，wc将永远看不到文件末尾。
xv6 shell以类似上述代码的方式实现了管道，例如grep fork sh.c | wc -l（user/sh.c:100）。

 The child process creates a pipe to connect the left end of the pipeline with the right end.
Then it calls fork and runcmd for the left end of the pipeline and fork and runcmd for the right end, and waits for both to ﬁnish.
The right end of the pipeline may be a command that itself includes a pipe (e.g., a | b | c), which itself forks two new child processes (one for b and one for c).
Thus, the shell may create a tree of processes.
The leaves of this tree are commands and the interior nodes are processes that wait until the left and right children complete.
In principle, one could have the interior nodes run the left end of a pipeline, but doing so correctly would complicate the implementation.
Consider making just the following modiﬁca- tion: change sh.c to not fork for p->left and run runcmd(p->left) in the interior pro- cess.
Then, for example, echo hi | wc won’t produce output, because when echo hi exits in runcmd, the interior process exits and never calls fork to run the right end of the pipe.
子进程创建一个管道，将管道的左端与右端连接起来。
然后它调用fork和runcmd来处理管道的左端，并调用fork和runcmd来处理管道的右端，并等待两者都完成。
管道的右端可能是一个包含管道的命令（例如，a | b | c），它本身会fork两个新的子进程（一个用于b，一个用于c）。
因此，shell可能会创建一个进程树。
这个树的叶子节点是命令，内部节点是等待左右子进程完成的进程。
原则上，内部节点可以运行管道的左端，但是这样做会使实现变得复杂。
考虑只做以下修改：将sh.c修改为不为p->left进行fork，并在内部进程中运行runcmd(p->left)。
然后，例如，echo hi | wc将不会产生输出，因为当echo hi在runcmd中退出时，内部进程退出，从而不会调用fork来运行管道的右端。

 This 16 incorrect behavior could be ﬁxed by not calling exit in runcmd for interior processes, but this ﬁx complicates the code: now runcmd needs to know if it a interior process or not.
Complications also arise when not forking for runcmd(p->right).
For example, with just that modiﬁcation, sleep 10 | echo hi will immediately print “hi” instead of after 10 seconds, because echo runs immediately and exits, not waiting for sleep to ﬁnish.
Since the goal of the sh.c is to be as simple as possible, it doesn’t try to avoid creating interior processes.
Pipes may seem no more powerful than temporary ﬁles: the pipeline echo hello world | wc could be implemented without pipes as echo hello world >/tmp/xyz; wc </tmp/xyz Pipes have at least four advantages over temporary ﬁles in this situation.
First, pipes automatically clean themselves up; with the ﬁle redirection, a shell would have to be careful to remove /tmp/xyz when done.
这16个错误行为可以通过在内部进程的runcmd中不调用exit来修复，但这种修复会使代码变得复杂：现在runcmd需要知道它是内部进程还是其他进程。
当不为runcmd(p->right)进行分叉时，也会出现复杂性。
例如，仅仅进行这种修改，sleep 10 | echo hi将立即打印“hi”，而不是等待10秒后再打印，因为echo会立即运行并退出，而不会等待sleep完成。
由于sh.c的目标是尽可能简单，它不会尝试避免创建内部进程。
管道可能看起来并不比临时文件更强大：管道命令echo hello world | wc可以像echo hello world >/tmp/xyz; wc </tmp/xyz这样实现。
在这种情况下，管道至少有四个优点。
首先，管道会自动清理自己；而使用文件重定向时，shell必须小心在完成后删除/tmp/xyz。

 Second, pipes can pass arbitrarily long streams of data, while ﬁle redirection requires enough free space on disk to store all the data.
Third, pipes allow for parallel execution of pipeline stages, while the ﬁle approach requires the ﬁrst program to ﬁnish before the second starts.
Fourth, if you are implementing inter-process communication, pipes’ blocking reads and writes are more efﬁcient than the non-blocking semantics of ﬁles.
1.4 File system The xv6 ﬁle system provides data ﬁles, which contain uninterpreted byte arrays, and directories, which contain named references to data ﬁles and other directories.
The directories form a tree, starting at a special directory called the root.
A path like /a/b/c refers to the ﬁle or directory named c inside the directory named b inside the directory named a in the root directory /.
Paths that don’t begin with / are evaluated relative to the calling process’s current directory, which can be changed with the chdir system call.
其次，管道可以传递任意长的数据流，而文件重定向需要足够的磁盘空间来存储所有数据。
第三，管道允许管道阶段的并行执行，而文件方法要求第一个程序完成后才能开始第二个程序。
第四，如果您正在实现进程间通信，管道的阻塞读写比文件的非阻塞语义更高效。
1.4 文件系统 xv6文件系统提供数据文件，其中包含未解释的字节数组，以及目录，其中包含对数据文件和其他目录的命名引用。
这些目录形成一个树，从一个称为根的特殊目录开始。
像/a/b/c这样的路径指的是根目录/中名为a的目录中名为b的目录中名为c的文件或目录。
不以/开头的路径相对于调用进程的当前目录进行评估，可以使用chdir系统调用更改当前目录。

 Both these code fragments open the same ﬁle (assuming all the directories involved exist): chdir("/a"); chdir("b"); open("c", O_RDONLY); open("/a/b/c", O_RDONLY); The ﬁrst fragment changes the process’s current directory to /a/b; the second neither refers to nor changes the process’s current directory.
There are system calls to create new ﬁles and directories: mkdir creates a new directory, open with the O_CREATE ﬂag creates a new data ﬁle, and mknod creates a new device ﬁle.
This example illustrates all three: mkdir("/dir"); fd = open("/dir/file", O_CREATE|O_WRONLY); close(fd); 17 mknod("/console", 1, 1); Mknod creates a special ﬁle that refers to a device.
Associated with a device ﬁle are the major and minor device numbers (the two arguments to mknod), which uniquely identify a kernel device.
When a process later opens a device ﬁle, the kernel diverts read and write system calls to the kernel device implementation instead of passing them to the ﬁle system.
这两个代码片段打开了同一个文件（假设所有涉及的目录都存在）：chdir（“/a”）; chdir（“b”）; open（“c”，O_RDONLY）; open（“/a/b/c”，O_RDONLY）; 第一个片段将进程的当前目录更改为/a/b；第二个既不引用也不更改进程的当前目录。
有系统调用来创建新文件和目录：mkdir创建一个新目录，带有O_CREATE标志的open创建一个新数据文件，mknod创建一个新设备文件。
这个例子说明了这三个：mkdir（“/dir”）; fd = open（“/dir/file”，O_CREATE | O_WRONLY）; close（fd）; 17 mknod（“/console”，1，1）; Mknod创建一个引用设备的特殊文件。
与设备文件关联的是主设备号和次设备号（mknod的两个参数），它们唯一地标识内核设备。
当进程稍后打开设备文件时，内核将读取和写入系统调用重定向到内核设备实现，而不是将它们传递给文件系统。

 A ﬁle’s name is distinct from the ﬁle itself; the same underlying ﬁle, called an inode, can have multiple names, called links.
Each link consists of an entry in a directory; the entry contains a ﬁle name and a reference to an inode.
An inode holds metadata about a ﬁle, including its type (ﬁle or directory or device), its length, the location of the ﬁle’s content on disk, and the number of links to a ﬁle.
The fstat system call retrieves information from the inode that a ﬁle descriptor refers to.
It ﬁlls in a struct stat, deﬁned in stat.h (kernel/stat.h) as: #define T_DIR #define T_FILE #define T_DEVICE 1 2 3 // Directory // File // Device struct stat { int dev; uint ino; short type; short nlink; // Number of links to file uint64 size; // Size of file in bytes // File system’s disk device // Inode number // Type of file }; The link system call creates another ﬁle system name referring to the same inode as an exist- ing ﬁle.
This fragment creates a new ﬁle named both a and b.
一个文件的名称与文件本身是不同的；同一个底层文件，称为inode，可以有多个名称，称为链接。
每个链接都包含在目录中的一个条目中；该条目包含一个文件名和对inode的引用。
inode保存有关文件的元数据，包括其类型（文件、目录或设备）、长度、文件内容在磁盘上的位置以及对文件的链接数。
fstat系统调用从文件描述符引用的inode中检索信息。
它填充一个在stat.h（kernel/stat.h）中定义的struct stat：#define T_DIR #define T_FILE #define T_DEVICE 1 2 3 // 目录 // 文件 // 设备struct stat { int dev; uint ino; short type; short nlink; // 文件的链接数uint64 size; // 文件的大小（以字节为单位）// 文件系统的磁盘设备// inode号// 文件类型};link系统调用创建另一个文件系统名称，引用与现有文件相同的inode。
此片段创建了一个名为a和b的新文件。

 open("a", O_CREATE|O_WRONLY); link("a", "b"); Reading from or writing to a is the same as reading from or writing to b.
Each inode is identiﬁed by a unique inode number.
After the code sequence above, it is possible to determine that a and b refer to the same underlying contents by inspecting the result of fstat: both will return the same inode number (ino), and the nlink count will be set to 2.
The unlink system call removes a name from the ﬁle system.
The ﬁle’s inode and the disk space holding its content are only freed when the ﬁle’s link count is zero and no ﬁle descriptors refer to it.
Thus adding unlink("a"); to the last code sequence leaves the inode and ﬁle content accessible as b.
Furthermore, fd = open("/tmp/xyz", O_CREATE|O_RDWR); unlink("/tmp/xyz"); is an idiomatic way to create a temporary inode with no name that will be cleaned up when the process closes fd or exits.
18 Unix provides ﬁle utilities callable from the shell as user-level programs, for example mkdir, ln, and rm.
打开("a", O_CREATE|O_WRONLY); 链接("a", "b"); 从a读取或写入与从b读取或写入相同。
每个inode由唯一的inode号标识。
在上述代码序列之后，可以通过检查fstat的结果来确定a和b引用相同的底层内容：两者都将返回相同的inode号（ino），并且nlink计数将设置为2。
unlink系统调用从文件系统中删除一个名称。
只有当文件的链接计数为零且没有文件描述符引用它时，才会释放文件的inode和保存其内容的磁盘空间。
因此，将unlink("a");添加到最后的代码序列中，将使inode和文件内容可通过b访问。
此外，fd = open("/tmp/xyz", O_CREATE|O_RDWR); unlink("/tmp/xyz"); 是一种创建临时inode的惯用方法，该inode没有名称，并且在进程关闭fd或退出时将被清理。
Unix提供了可从shell作为用户级程序调用的文件实用程序，例如mkdir、ln和rm。

 This design allows anyone to extend the command-line interface by adding new user- level programs.
In hindsight this plan seems obvious, but other systems designed at the time of Unix often built such commands into the shell (and built the shell into the kernel).
One exception is cd, which is built into the shell (user/sh.c:160).
cd must change the current working directory of the shell itself.
If cd were run as a regular command, then the shell would fork a child process, the child process would run cd, and cd would change the child ’s working directory.
The parent’s (i.e., the shell’s) working directory would not change.
1.5 Real world Unix’s combination of “standard” ﬁle descriptors, pipes, and convenient shell syntax for operations on them was a major advance in writing general-purpose reusable programs.
The idea sparked a culture of “software tools” that was responsible for much of Unix’s power and popularity, and the shell was the ﬁrst so-called “scripting language.
这个设计允许任何人通过添加新的用户级程序来扩展命令行界面。
事后看来，这个计划似乎很明显，但是Unix时代设计的其他系统通常将这些命令构建到shell中（并将shell构建到内核中）。
一个例外是cd命令，它是内置在shell中的（user/sh.c:160）。
cd命令必须改变shell本身的当前工作目录。
如果将cd命令作为常规命令运行，那么shell将fork一个子进程，子进程将运行cd命令，并且cd命令将改变子进程的工作目录。
父进程（即shell）的工作目录不会改变。
1.5 现实世界中，Unix的“标准”文件描述符、管道和方便的shell语法对于编写通用可重用程序是一个重大进步。
这个想法引发了一个“软件工具”的文化，这个文化对于Unix的强大和流行起到了很大的推动作用，而shell是第一个所谓的“脚本语言”。

” The Unix system call interface persists today in systems like BSD, Linux, and Mac OS X.
The Unix system call interface has been standardized through the Portable Operating System Interface (POSIX) standard.
Xv6 is not POSIX compliant: it is missing many system calls (in- cluding basic ones such as lseek), and many of the system calls it does provide differ from the standard.
Our main goals for xv6 are simplicity and clarity while providing a simple UNIX-like system-call interface.
Several people have extended xv6 with a few more system calls and a sim- ple C library in order to run basic Unix programs.
Modern kernels, however, provide many more system calls, and many more kinds of kernel services, than xv6.
For example, they support net- working, windowing systems, user-level threads, drivers for many devices, and so on.
Modern kernels evolve continuously and rapidly, and offer many features beyond POSIX.
Unix系统调用接口在今天的系统中仍然存在，例如BSD、Linux和Mac OS X。
Unix系统调用接口已经通过可移植操作系统接口（POSIX）标准进行了标准化。
Xv6不符合POSIX标准：它缺少许多系统调用（包括基本的lseek等），而且它提供的许多系统调用与标准不同。
我们对xv6的主要目标是简单和清晰，同时提供一个简单的类UNIX系统调用接口。
一些人已经通过添加一些系统调用和一个简单的C库来扩展xv6，以便运行基本的Unix程序。
然而，现代内核提供了更多的系统调用和更多种类的内核服务，而不仅仅是xv6。
例如，它们支持网络、窗口系统、用户级线程、许多设备的驱动程序等等。
现代内核不断快速演进，并提供许多超出POSIX标准的功能。

 Unix uniﬁed access to multiple types of resources (ﬁles, directories, and devices) with a single set of ﬁle-name and ﬁle-descriptor interfaces.
This idea can be extended to more kinds of resources; a good example is Plan 9 [13], which applied the “resources are ﬁles” concept to networks, graph- ics, and more.
However, most Unix-derived operating systems have not followed this route.
The ﬁle system and ﬁle descriptors have been powerful abstractions.
Even so, there are other models for operating system interfaces.
Multics, a predecessor of Unix, abstracted ﬁle storage in a way that made it look like memory, producing a very different ﬂavor of interface.
The complexity of the Multics design had a direct inﬂuence on the designers of Unix, who tried to build something simpler.
Xv6 does not provide a notion of users or of protecting one user from another; in Unix terms, all xv6 processes run as root.
Unix统一访问多种类型的资源（文件、目录和设备），使用一组文件名和文件描述符接口。
这个想法可以扩展到更多种类的资源；一个很好的例子是Plan 9 [13]，它将“资源就是文件”的概念应用于网络、图形等。
然而，大多数派生自Unix的操作系统并没有遵循这条路线。
文件系统和文件描述符是强大的抽象。
即便如此，操作系统接口还有其他模型。
Unix的前身Multics以一种使文件存储看起来像内存的方式进行了抽象，产生了一种非常不同的接口风格。
Multics设计的复杂性直接影响了Unix的设计者，他们试图构建一些更简单的东西。
Xv6不提供用户的概念，也不保护一个用户免受另一个用户的影响；用Unix的术语来说，所有的xv6进程都以root身份运行。

 This book examines how xv6 implements its Unix-like interface, but the ideas and concepts apply to more than just Unix.
Any operating system must multiplex processes onto the underlying hardware, isolate processes from each other, and provide mechanisms for controlled inter-process communication.
After studying xv6, you should be able to look at other, more complex operating systems and see the concepts underlying xv6 in those systems as well.
19 1.6 Exercises 1.
Write a program that uses UNIX system calls to “ping-pong” a byte between two processes over a pair of pipes, one for each direction.
Measure the program’s performance, in ex- changes per second.
这本书探讨了xv6如何实现其类Unix接口，但其中的思想和概念不仅适用于Unix。
任何操作系统都必须将进程多路复用到底层硬件上，将进程相互隔离，并提供控制进程间通信的机制。
通过学习xv6，您应该能够查看其他更复杂的操作系统，并在这些系统中看到xv6所基于的概念。
19 1.6练习1.编写一个程序，使用UNIX系统调用在一对管道上的两个进程之间“ping-pong”一个字节。
测量程序的性能，以每秒交换次数为单位。

