
{
  "title":"Memory and Search Methods",
  "content":"« Previous | Next »\nSession Overview This lecture discusses how indirection is used to provide an efficient implementation of Python lists and other data structures. It also presents and analyzes the efficiency of selection and merge sort.\nSession Activities Lecture Videos Lecture 9: Memory and Search Methods About this Video Topics covered: Memory, storage, indirection, sorting.\nResources Lecture code handout (PDF) Lecture code (PY) Check Yourself What is indirection (in computing)?\n› View/hide answer\nIndirection is the ability to access something using a name or reference instead of the value itself.\nWe know that a linear search works on all lists and is O(len(L)). Can we sort a list in sub-linear time?\n› View/hide answer\nNo, because we can\u0026rsquo;t sort a list without looking at each element at least once.\nCan we even do it in linear time?\n› View/hide answer\nThe answer is probably, no. But we can do it in O(n log n), where n is the length of the list.\nFurther Study These optional resources are provided for students that wish to explore this topic more fully.\nReadings 8.7. Sets—Unordered collections of unique elements. Python Standard Library. Related Lectures 6.01SC Introduction to Electrical Engineering and Computer Science I. Search Algorithms Optimizing a search 6.006 Introduction to Algorithms. 6.006 lectures assume a greater level of mathematical sophistication than does 6.00SC. Read the lecture notes on: Binary search trees Sorting Searching « Previous | Next »\n"}


