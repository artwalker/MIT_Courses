
{
  "title":"Machine Interpretation of a Program",
  "content":"« Previous | Next »\nSession Overview This lecture introduces the notion of decomposition and abstraction by specification. It also covers Python modules, functions, parameters, and scoping. Finally, it uses the Python assert statement and type \u0026lsquo;str\u0026rsquo;.\nImage courtesy of The Consumerist on Flickr.\nSession Activities Lecture Videos Lecture 4: Machine Interpretation of a Program About this Video Topics covered: Decomposition, module, function, abstraction, formal parameter, actual parameter, argument, assert, scope, mapping, stack, last in first out, LIFO, strings, slicing.\nResources Lecture code handout (PDF) Lecture code (PY) Recitation Videos Recitation 2: Loops, Tuples, Strings and Functions About this Video Topics covered: Loops, tuples, concatenating tuples and strings, string operations, immutability, range function, slicing, types of data structures, decrementing function, global and local variables, global keepers.\nCheck Yourself What is decomposition?\n› View/hide answer\nDecomposition breaks a problem into self-contained, manageable parts.\nWhat is abstraction?\n› View/hide answer\nAbstraction allows us to ignore the details of a piece of code, and use it as a black box – input x, get y.\nWhat is the difference between formal and actual parameters?\n› View/hide answer\nFormal parameters are the names of variables used inside a procedure; actual parameters (or arguments) are the values assigned to those names.\nProblem Sets Problem Set 1: Paying Off Credit Card Debt (Due) This problem set will introduce you to using control flow in Python and formulating a computational solution to a problem. You will design and write three simple Python programs, test them, and hand them in.\nInstructions (PDF) Solutions (ZIP) (This ZIP file contains: 3 .py files.) Problem Set 2 (Assigned) Problem set 2 is assigned in this session. The instructions and solutions can be found on the session page where it is due, Lecture 6 Recursion.\n« Previous | Next »\n"}


