
{
  "title":"OOP and Inheritance",
  "content":"« Previous | Next »\nSession Overview In this lecture, we learn about object-oriented programming (OOP) and how classes are used to implement new types of objects in Python. As part of that discussion we introduce inheritance.\nImage courtesy of The Ridg on Flickr.\nSession Activities Lecture Videos Lecture 11: OOP and Inheritance About this Video Topics covered: Object-oriented programming (OOP), abstract data types, specifications, subclasses, inheritance.\nResources Lecture code handout (PDF) Lecture code (PY) Recitation Videos Recitation 5: Quiz 1 Answers and Object-Oriented Programming About this Video Topics covered: Double recursion, big O notation, binary function, run times, object-oriented programming, classes, encapsulation, methods, class hierarchy, subclasses, inheritance, polymorphism, accessor and mutator functions, Person example, underbar methods, self parameter.\nCheck Yourself What is an instance?\n› View/hide answer\nInstances are the actual objects built in accordance with the qualities of the class.\nWhat is an abstract data type?\n› View/hide answer\nA set of objects and the operations on those objects.\nWhat is encapsulation?\n› View/hide answer\nEncapsulation means that names (of variables and methods) are stored in locations that then have to be accessed, called namespaces.\nWhat is data hiding?\n› View/hide answer\nData hiding makes data invisible to users of the object, requiring it to be accessed only via the object\u0026rsquo;s methods.\nWhat functions can subclasses use?\n› View/hide answer\nSubclasses can use all the functions of their superclass. They can also use any functions that are defined within the subclass; however, if the subclass uses the same name for a function which has also been used in the superclass, it will only use the subclass definition of that function.\n« Previous | Next »\n"}


