xv6: a simple, Unix-like teaching operating system Russ Cox Frans Kaashoek Robert Morris August 31, 2020 Contents 1 Operating system interfaces 9 1.1 Processes and memory 1.2 I/O and File descriptors 1.3 Pipes 1.4 File system 1.5 Real world 1.6 Exercises 2 Operating system organization 2.1 Abstracting physical resources 2.2 User mode, supervisor mode, and system calls 2.3 Kernel organization 2.4 Code: xv6 organization 2.5 Process overview 2.6 Code: starting xv6 and the first process 2.7 Real world 2.8 Exercises 3 Page tables 3.1 Paging hardware 3.2 Kernel address space 3.3 Code: creating an address space 3.4 Physical memory allocation 3.5 Code: Physical memory allocator 3.6 Process address space 3.7 Code: sbrk 3.8 Code: exec 3.9 Real world 3.10 Exercises 4 Traps and system calls 4.1 RISC-V trap machinery 4.2 Traps from user space 4.3 Code: Calling system calls 4.4 Code: System call arguments 4.5 Traps from kernel space 4.6 Page-fault exceptions 4.7 Real world 4.8 Exercises 5 Interrupts and device drivers 5.
xv6：一个简单的类Unix教学操作系统
Russ Cox
Frans Kaashoek
Robert Morris
2020年8月31日
目录
1 操作系统接口
1.1 进程和内存
1.2 输入/输出和文件描述符
1.3 管道
1.4 文件系统
1.5 真实世界
1.6 练习
2 操作系统组织
2.1 抽象物理资源
2.2 用户模式、监管模式和系统调用
2.3 内核组织
2.4 代码：xv6组织
2.5 进程概述
2.6 代码：启动xv6和第一个进程
2.7 真实世界
2.8 练习
3 页表
3.1 分页硬件
3.2 内核地址空间
3.3 代码：创建地址空间
3.4 物理内存分配
3.5 代码：物理内存分配器
3.6 进程地址空间
3.7 代码：sbrk
3.8 代码：exec
3.9 真实世界
3.10 练习
4 陷阱和系统调用
4.1 RISC-V陷阱机制
4.2 用户空间的陷阱
4.3 代码：调用系统调用
4.4 代码：系统调用参数
4.5 内核空间的陷阱
4.6 页面错误异常
4.7 真实世界
4.8 练习
5 中断和设备驱动程序
1 Code: Console input 5.2 Code: Console output 5.3 Concurrency in drivers 5.4 Timer interrupts 5.5 Real world 5.6 Exercises 6 Locking 6.1 Race conditions 6.2 Code: Locks 6.3 Code: Using locks 6.4 Deadlock and lock ordering 6.5 Locks and interrupt handlers 6.6 Instruction and memory ordering 6.7 Sleep locks 6.8 Real world 6.9 Exercises 7 Scheduling 7.1 Multiplexing 7.2 Code: Context switching 7.3 Code: Scheduling 7.4 Code: mycpu and myproc 7.5 Sleep and wakeup 7.6 Code: Sleep and wakeup 7.7 Code: Pipes 7.8 Code: Wait, exit, and kill 7.9 Real world 7.10 Exercises 8 File system 8.1 Overview 8.2 Buffer cache layer 8.3 Code: Buffer cache 8.4 Logging layer 8.5 Log design 8.6 Code: logging 8.7 Code: Block allocator 8.8 Inode layer 8.9 Code: Inodes 8.10 Code: Inode content 8.11 Code: directory layer 8.12 Code: Path names 8.13 File descriptor layer 8.14 Code: System calls 8.15 Real world 8.16 Exercises 9 Concurrency revisited 9.1 Locking patterns 9.2 Lock-like patterns 9.3 No locks at all 9.4 Parallelism 9.
1 代码：控制台输入 5.2 代码：控制台输出 5.3 驱动程序中的并发性 5.4 定时器中断 5.5 真实世界 5.6 练习 6 锁定 6.1 竞争条件 6.2 代码：锁定 6.3 代码：使用锁定 6.4 死锁和锁定顺序 6.5 锁定和中断处理程序 6.6 指令和内存顺序 6.7 睡眠锁 6.8 真实世界 6.9 练习 7 调度 7.1 多路复用 7.2 代码：上下文切换 7.3 代码：调度 7.4 代码：mycpu和myproc 7.5 睡眠和唤醒 7.6 代码：睡眠和唤醒 7.7 代码：管道 7.8 代码：等待、退出和终止 7.9 真实世界 7.10 练习 8 文件系统 8.1 概述 8.2 缓冲区缓存层 8.3 代码：缓冲区缓存 8.4 日志层 8.5 日志设计 8.6 代码：日志 8.7 代码：块分配器 8.8 i节点层 8.9 代码：i节点 8.10 代码：i节点内容 8.11 代码：目录层 8.12 代码：路径名 8.13 文件描述符层 8.14 代码：系统调用 8.15 真实世界 8.16 练习 9 并发性再探 9.1 锁定模式 9.2 类似锁定的模式 9.3 没有锁定 9.4 并行性 9.
