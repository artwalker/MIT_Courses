6.S081 2020 Lecture 1: O/S overview 
Overview 
* 6.S081 goals 
	* Understand operating system (O/S) design and implementation 
	* Hands-on experience extending a small O/S 
	* Hands-on experience writing systems software 
* What is the purpose of an O/S? 
	* Abstract the hardware for convenience and portability 
	* Multiplex the hardware among many applications 
	* Isolate applications in order to contain bugs 
	* Allow sharing among cooperating applications 
	* Control sharing for security 
	* Don't get in the way of high performance 
	* Support a wide range of applications 
* Organization: layered picture 
  [user/kernel diagram] 
  - user applications: vi, gcc, DB, &c 
  - kernel services 
  - h/w: CPU, RAM, disk, net, &c 
  * we care a lot about the interfaces and internal kernel structure 

6.S081 2020 第一讲：操作系统概述
概述
* 6.S081的目标
	* 理解操作系统（O/S）的设计和实现
	* 通过扩展一个小型操作系统获得实践经验
	* 通过编写系统软件获得实践经验
* 操作系统的目的是什么？
	* 为了方便和可移植性而抽象硬件
	* 在许多应用程序之间复用硬件资源
	* 隔离应用程序以防止错误扩散
	* 允许合作应用程序之间共享资源
	* 控制资源共享以保证安全性
	* 不妨碍高性能
	* 支持广泛的应用程序范围
* 组织结构：分层图示
  [用户/内核图示]
- 用户应用程序：vi，gcc，DB等
- 内核服务
- 硬件：CPU，RAM，磁盘，网络等
* 我们非常关注接口和内核结构

* What services does an O/S kernel typically provide?
	* process (a running program) 
	* memory allocation 
	* file contents 
	* file names, directories 
	* access control (security) 
	* many others: users, IPC, network, time, terminals 

* What's the application / kernel interface? 
	* "System calls" 
	* Examples, in C, from UNIX (e.g.Linux, macOS, FreeBSD): 
	
		fd = open("out", 1); 
		write(fd, "hello\n", 6); 
		pid = fork(); 
	* These look like function calls but they aren't 
	
* Why is O/S design+implementation hard and interesting? 
	* unforgiving environment: quirky h/w, hard to debug 
	* many design tensions: 
		- efficient vs abstract/portable/general-purpose 
		- powerful vs simple interfaces 
		- flexible vs secure 
	* features interact: `fd = open(); fork()` 
	* uses are varied: laptops, smart-phones, cloud, virtual machines, embedded 
	* evolving hardware: NVRAM, multi-core, fast networks 

* 操作系统内核通常提供哪些服务？
	* 进程（正在运行的程序）
	* 内存分配 
	* 文件内容 
	* 文件名，目录 
	* 访问控制（安全性） 
	* 其他许多功能：用户，IPC，网络，时间，终端 

* 应用程序/内核接口是什么？ 
	* "系统调用" 
	* 以C语言为例，来自UNIX（例如Linux，macOS，FreeBSD）：
	
		fd = open("out", 1); 
		write(fd, "hello\n", 6); 
		pid = fork(); 
	* 这些看起来像函数调用，但实际上不是 

* 为什么操作系统的设计和实现很难且有趣？ 
	* 严苛的环境：古怪的硬件，难以调试 
	* 许多设计张力：
		- 高效与抽象/可移植/通用 
		- 强大与简单接口 
		- 灵活与安全 
	* 功能相互交互：`fd = open(); fork()` 
	* 使用范围广泛：笔记本电脑，智能手机，云，虚拟机，嵌入式 
	* 硬件不断发展：NVRAM，多核，快速网络 

* You'll be glad you took this course if you...
	* care about what goes on under the hood 
	* like infrastructure 
	* need to track down bugs or security problems 
	* care about high performance 

Class structure 

* Online course information: 
	https://pdos.csail.mit.edu/6.S081/ -- schedule, assignments, labs 
	Piazza -- announcements, discussion, lab help 

* Lectures 
	* O/S ideas 
	* case study of xv6, a small O/S, via code and xv6 book 
	* lab background 
	* O/S papers 
	* submit a question about each reading, before lecture.
	
* Labs: 
	The point: hands-on experience Mostly one week each.
	Three kinds: 
		Systems programming (due next week...) 
		O/S primitives, e.g. thread switching.
		O/S kernel extensions to xv6, e.g. network.
	Use piazza to ask/answer lab questions.
	Discussion is great, but please do not look at others' solutions! 
	
* Grading: 
	70% labs, based on tests (the same tests you run).
	20% lab check-off meetings: we'll ask you about randomly-selected labs.
	10% home-work and class/piazza discussion.
	No exams, no quizzes.	
	Note that most of the grade is from labs.Start them early!

* 如果你...，你会庆幸上了这门课程
	* 关心底层发生的事情
	* 喜欢基础设施
	* 需要追踪错误或安全问题
	* 关心高性能

课程结构

* 在线课程信息：
	https://pdos.csail.mit.edu/6.S081/ -- 日程安排，作业，实验
	Piazza -- 公告，讨论，实验帮助

* 讲座
	* 操作系统的思想
	* 通过代码和xv6书籍对小型操作系统xv6进行案例研究
	* 实验背景
	* 操作系统论文
	* 在讲座之前提交关于每篇阅读的问题
	
* 实验：
	重点是实践经验
	大多数实验为一周时间	
	三种类型：
		系统编程（下周截止...）
		操作系统原语，例如线程切换
		xv6的操作系统内核扩展，例如网络
	使用piazza提问/回答实验问题
	讨论很好，但请不要查看他人的解决方案！

* 分数：
	70%的实验，基于测试（与您运行的相同测试）。
	20%的实验签到会议：我们会询问您关于随机选择的实验。
	10%的家庭作业和课堂/piazza讨论。
	没有考试，没有测验。
	请注意，大部分成绩来自实验。请尽早开始！

Introduction to UNIX system calls 

* Applications see the O/S via system calls; that interface will be a big focus.
  let's start by looking at how programs use system calls.
  you'll use these system calls in the first lab.
  and extend and improve them in subsequent labs.

* I'll show some examples, and run them on xv6.
  xv6 has similar structure to UNIX systems such as Linux.
  but much simpler -- you'll be able to digest all of xv6 
    accompanying book explains how xv6 works, and why 
  why UNIX? 
    open source, well documented, clean design, widely used 
    studying xv6 will help if you ever need to look inside Linux 
  xv6 has two roles in 6.S081: 
    example of core functions: virtual memory, multi-core, interrupts, &c 
    starting point for most of the labs 
  xv6 runs on RISC-V, as in current 6.004 
  you'll run xv6 under the qemu machine emulator 

UNIX系统调用简介

* 应用程序通过系统调用与操作系统进行交互，这个接口是一个重要的焦点。
让我们先来看看程序如何使用系统调用。
你将在第一个实验中使用这些系统调用，并在后续实验中进行扩展和改进。

* 我将展示一些示例，并在xv6上运行它们。
xv6的结构类似于UNIX系统，如Linux，但更简单 - 你将能够理解xv6的所有内容。
附带的书籍解释了xv6的工作原理以及为什么选择UNIX。
开源、文档完善、设计简洁、被广泛使用。
如果你需要深入了解Linux，学习xv6将会有所帮助。

 xv6在6.S081中有两个角色：核心功能的示例：虚拟内存、多核、中断等。
 大多数实验的起点。
 xv6在RISC-V上运行，与当前的6.004相同。
 你将在qemu机器模拟器下运行xv6。



* example: copy.c, copy input to output 
  read bytes from input, write them to the output
$ copy 
copy.c is written in C 
  Kernighan and Ritchie (K&R) book is good for learning C 
you can find these example programs via the schedule on the web site 
read() and write() are system calls 
first read()/write() argument is a "file descriptor" (fd) 
   passed to kernel to tell it which "open file" to read/write 
   must previously have been opened 
   an FD connects to a file/device/socket/&c 
   a process can open many files, have many FDs 
   UNIX convention: fd 0 is "standard input", 1 is "standard output" 
second read() argument is a pointer to some memory into which to read 
third argument is the maximum number of bytes to read 
   read() may read less, but not more 
return value: number of bytes actually read, or -1 for error 
note: copy.c does not care about the format of the data 
   UNIX I/O is 8-bit bytes 
   interpretation is application-specific, e.g. database records, C source, &c 
where do file descriptors come from? 

* 示例：copy.c，将输入复制到输出
从输入读取字节，将它们写入输出。
$ copy 
copy.c是用C编写的。
Kernighan和Ritchie（K&R）的书非常适合学习C语言。
您可以通过网站上的日程表找到这些示例程序。
read()和write()是系统调用。
第一个read()/write()参数是一个“文件描述符”（fd）
	传递给内核告诉它要读取/写入哪个“打开的文件”。
	必须先前已经打开
	一个 FD 连接到一个文件/设备/套接字等
	一个进程可以打开多个文件，拥有多个FD。
	UNIX约定：fd 0是“标准输入”，1是“标准输出”。
第二个read()参数是一个指向要读取的内存的指针。
第三个参数是要读取的最大字节数。
	read()可能读取的字节数较少，但不会超过最大字节数。
返回值：实际读取的字节数，或者-1表示错误。
注意：copy.c不关心数据的格式。
UNIX I/O是8位字节
解释是应用程序特定的，例如数据库记录，C源代码等。
文件描述符从哪里来？

* example: open.c, create a file 
	$ open 
	$ cat output.txt
open() creates a file, returns a file descriptor (or -1 for error) 
FD is a small integer 
FD indexes into a per-process table maintained by kernel 
[user/kernel diagram] 
different processes have different FD name-spaces 
   i.e. FD 1 often means different things to different processes 
these examples ignore errors -- don't be this sloppy! 
Figure 1.2 in the xv6 book lists system call arguments/return 
   or look at UNIX man pages, e.g."man 2 open" 
   


*示例：open.c，创建一个文件
	$ open 
	$ cat output.txt 
open() 创建一个文件，返回一个文件描述符（错误时返回-1）。
FD是一个小整数
FD索引到内核维护的每个进程表中的位置。
[用户/内核图表]
不同的进程有不同的FD命名空间
    即FD 1对于不同的进程通常意味着不同的东西。
这些示例忽略了错误--不要这么粗心！
《xv6》书中的图1.2列出了系统调用的参数/返回值，或者查看UNIX手册页，例如"man 2 open"。

* what happens when a program calls a system call like open()?
  looks like a function call, but it's actually a special instruction 
  hardware saves some user registers 
  hardware increases privilege level 
  hardware jumps to a known "entry point" in the kernel 
  now running C code in the kernel 
  kernel calls system call implementation 
  	open() looks up name in file system 
  	it might wait for the disk 
  	it updates kernel data structures (cache, FD table) 
  restore user registers 
  reduce privilege level 
  jump back to calling point in the program, which resumes 
  we'll see more detail later in the course 
  
* I've been typing to UNIX's command-line interface, the shell.
  the shell prints the "$" prompts.
  the shell lets you run UNIX command-line utilities 
     useful for system management, messing with files, development, scripting 
     $ ls 
     $ ls > out 
     $ grep x < out 
  UNIX supports other styles of interaction too 
     window systems, GUIs, servers, routers, &c.
  but time-sharing via the shell was the original focus of UNIX.
  we can exercise many system calls via the shell.

* 当程序调用像open()这样的系统调用时会发生什么？
看起来像是一个函数调用，但实际上是一个特殊的指令
硬件保存一些用户寄存器
硬件提升特权级别
硬件跳转到内核中已知的“入口点”
现在在内核中运行C代码
内核调用系统调用实现
   open()在文件系统中查找名称
      可能会等待磁盘
      更新内核数据结构（缓存、文件描述符表）
恢复用户寄存器
降低特权级别
跳回到程序中的调用点，程序继续执行
在课程后面我们会看到更多细节

* 我一直在输入UNIX的命令行界面，也就是shell。
shell打印"$"提示符。
shell允许您运行UNIX命令行实用程序
    用于系统管理、文件操作、开发和脚本编写
	$ ls
	$ ls > out
	$ grep x < out
UNIX还支持其他交互方式
    如窗口系统、图形用户界面、服务器、路由器等
但通过shell进行时间共享是UNIX的最初关注点
我们可以通过shell来执行许多系统调用


* example: fork.c, create a new process 
  the shell creates a new process for each command you type, e.g. for 
     $ echo hello 
  the fork() system call creates a new process 
     $ fork 
  the kernel makes a copy of the calling process 
    instructions, data, registers, file descriptors, current directory 
    "parent" and "child" processes 
  only difference: fork() returns a pid in parent, 0 in child 
  a pid (process ID) is an integer, kernel gives each process a different pid 
  thus: 
    fork.c's "fork() returned" executes in *both* processes 
    the "if(pid == 0)" allows code to distinguish 
  ok, fork lets us create a new process 
    how can we run a program in that process? 
    


* 示例：fork.c，创建一个新的进程
shell为您键入的每个命令创建一个新的进程，例如
对于
$ echo hello
fork()系统调用会创建一个新的进程
$ fork
内核会复制调用进程的
指令、数据、寄存器、文件描述符、当前目录
“父”和“子”进程
唯一区别：fork()在父进程中返回一个pid，在子进程中返回0 
pid（进程ID）是一个整数，内核为每个进程分配一个不同的pid
因此：
fork.c的“fork()返回”在*两个*进程中执行
“if(pid == 0)”允许代码区分
好的，fork让我们创建一个新的进程
我们如何在该进程中运行程序？

* example: exec.c, replace calling process with an executable file 
  how does the shell run a program, e.g.
    $ echo a b c 
  a program is stored in a file: instructions and initial memory 
    created by the compiler and linker 
  so there's a file called echo, containing instructions 
  $ exec 
  exec() replaces current process with an executable file 
    discards instruction and data memory 
    loads instructions and memory from the file 
    preserves file descriptors 
  exec(filename, argument-array) 
    argument-array holds command-line arguments; exec passes to main() 
    cat user/echo.c 
    echo.c shows how a program looks at its command-line arguments 
 
*示例：exec.c，用可执行文件替换调用进程
 shell如何运行程序，例如
   $ echo a b c 
   程序存储在一个文件中：由编译器和链接器创建的指令和初始内存
   所以有一个名为echo的文件，包含指令 
 $ exec 
 exec()用可执行文件替换当前进程
      丢弃指令和数据内存
      从文件加载指令和内存
      保留文件描述符 
 exec(filename, argument-array) 
   argument-array保存命令行参数；exec传递给main() 
   cat user/echo.c 
   echo.c展示了一个程序如何查看其命令行参数
    
* example: forkexec.c, fork() a new process, exec() a program 
  $ forkexec 
  forkexec.c contains a common UNIX idiom: 
    fork() a child process 
    exec() a command in the child 
    parent wait()s for child to finish 
  the shell does fork/exec/wait for every command you type 
    after wait(), the shell prints the next prompt 
    to run in the background -- & -- the shell skips the wait() 
  exit(status) -> wait(&status) 
    status convention: 0 = success, 1 = command encountered an error 
  note: the fork() copies, but exec() discards the copied memory 
    this may seem wasteful 
    you'll transparently eliminate the copy in the "copy-on-write" lab 
  
$ echo a b c a program is stored in a file: instructions and initial memory created by the compiler and linker so there's a file called echo, containing instructions $ exec exec() replaces current process with an executable file discards instruction and data memory loads instructions and memory from the file preserves file descriptors exec(filename, argument-array) argument-array holds command-line arguments; exec passes to main() cat user/echo.c echo.c shows how a program looks at its command-line arguments * example: forkexec.c, fork() a new process, exec() a program $ forkexec forkexec.
  
*示例：forkexec.c，fork()一个新进程，exec()一个程序 
  $ forkexec 
  forkexec.c包含一个常见的UNIX习语：
    fork()一个子进程
    exec()在子进程中执行命令
         父进程等待子进程完成
  shell为您输入的每个命令执行fork/exec/wait操作
        在wait()之后，shell打印下一个提示符
        若要在后台运行，使用&，shell会跳过wait()
  exit(status) -> wait(&status) 
         状态约定：0 = 成功，1 = 命令遇到错误
    注意：fork()会复制，但exec()会丢弃复制的内存
        这可能看起来很浪费。
        在"copy-on-write"实验中，您将透明地消除复制

* example: redirect.c, redirect the output of a command
  what does the shell do for this?
    $ echo hello > out
  answer: fork, change FD 1 in child, exec echo
  $ redirect
  $ cat output.txt
  note: open() always chooses lowest unused FD; 1 due to close(1).
  fork, FDs, and exec interact nicely to implement I/O redirection
    separate fork-then-exec give child a chance to change FDs before exec
    FDs provide indirection
      commands just use FDs 0 and 1, don't have to know where they go
    exec preserves the FDs that sh set up
  thus: only sh has to know about I/O redirection, not each program

* It's worth asking "why" about design decisions:
  Why these I/O and process abstractions? Why not something else?
  Why provide a file system? Why not let programs use the disk their own way?
  Why FDs? Why not pass a filename to write()?
  Why are files streams of bytes, not disk blocks or formatted records?
  Why not combine fork() and exec()?
  The UNIX design works well, but we will see other designs!

* 示例：redirect.c，重定向命令的输出。
  shell对此做了什么？
    $ echo hello > out 
    答案：fork，在子进程中更改FD 1，exec echo 
  $ redirect 
  $ cat output.txt 
    注意：open()总是选择最低未使用的FD；1是由于close(1)。
  fork、FDs和exec相互配合，实现了I/O重定向。
        分离的fork-then-exec使得子进程有机会在exec之前改变FDs。
    FDs提供了间接命令。
             命令只需使用FDs 0和1，不需要知道它们的具体位置。
    exec保留了sh设置的FDs
     因此只有sh需要知道I/O重定向，而不是每个程序。
     
* 关于设计决策，值得问一下“为什么”：
    为什么选择这些I/O和进程抽象？为什么不选择其他方式？
    为什么提供文件系统？为什么不让程序按照自己的方式使用磁盘？
    为什么使用FDs？为什么不直接将文件名传递给write()？
    为什么文件是字节流，而不是磁盘块或格式化记录？
    为什么不将fork()和exec()合并？
  UNIX的设计很好，但我们还会看到其他设计！

* example: pipe1.c, communicate through a pipe
  how does the shell implement
    $ ls | grep x
  $ pipe1
  an FD can refer to a "pipe", as well as a file
  the pipe() system call creates two FDs
    read from the first FD
    write to the second FD
  the kernel maintains a buffer for each pipe
    [u/k diagram]
    write() appends to the buffer
    read() waits until there is data

* 示例：pipe1.c，通过管道进行通信
  shell如何实现
     $ ls | grep x 
  $ pipe1 
  FD可以引用“管道”，也可以引用文件
  pipe()系统调用创建两个FD
        从第一个FD读取
        写入第二个FD
     内核为每个管道维护一个缓冲区
     [u/k图]
     write()将数据追加到缓冲区
     read()等待数据的到来

* example: pipe2.c, communicate between processes
  pipes combine well with fork() to implement ls | grep x
    shell creates a pipe,
    then forks (twice),
    then connects ls's FD 1 to pipe's write FD,
    and grep's FD 0 to the pipe
    [diagram]
  $ pipe2 -- a simplified version 
  pipes are a separate abstraction, but combine well w/ fork()

* 示例：pipe2.c，进程间通信管道
    与fork()结合实现ls | grep x 
    shell创建一个管道
         然后fork（两次）
         然后将ls的FD 1连接到管道的写入FD
         将grep的FD 0连接到管道
    [图] 
  $ pipe2 --一个简化版本
    管道是一个独立的抽象，但与fork()结合得很好

* example: list.c, list files in a directory
  how does ls get a list of the files in a directory?
  you can open a directory and read it -> file names
  "." is a pseudo-name for a process's current directory
  see ls.c for more details
    
 * 示例：list.c，列出目录中的文件
   ls如何获取目录中的文件列表？
       您可以打开一个目录并读取它->文件名
   “.”是进程当前目录的伪名称
       有关详细信息，请参阅ls.c
       
* Summary
  * We've looked at UNIX's I/O, file system, and process abstractions.
  * The interfaces are simple -- just integers and I/O buffers.
  * The abstractions combine well, e.g. for I/O redirection.

You'll use these system calls in the first lab, due next week.

* 总结
   * 我们已经研究了UNIX的I/O，文件系统和进程抽象。
   * 接口很简单--只有整数和I/O缓冲区。
   * 抽象很好地结合在一起，例如用于I/O重定向。
   
你会在下周截止的第一个实验中使用这些系统调用。

